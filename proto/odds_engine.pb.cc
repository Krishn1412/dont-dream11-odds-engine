// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odds_engine.proto
// Protobuf C++ Version: 5.29.3

#include "odds_engine.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace odds {

inline constexpr SetInitialOddsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : game_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        initialprobability_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetInitialOddsRequest::SetInitialOddsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetInitialOddsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetInitialOddsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetInitialOddsRequestDefaultTypeInternal() {}
  union {
    SetInitialOddsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetInitialOddsRequestDefaultTypeInternal _SetInitialOddsRequest_default_instance_;

inline constexpr OddsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : winprobability_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OddsResponse::OddsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OddsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OddsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OddsResponseDefaultTypeInternal() {}
  union {
    OddsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OddsResponseDefaultTypeInternal _OddsResponse_default_instance_;

inline constexpr OddsQueryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : gameid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OddsQueryRequest::OddsQueryRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OddsQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OddsQueryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OddsQueryRequestDefaultTypeInternal() {}
  union {
    OddsQueryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OddsQueryRequestDefaultTypeInternal _OddsQueryRequest_default_instance_;

inline constexpr Bet::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : userid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stake_{0},
        odds_{0},
        teama_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Bet::Bet(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BetDefaultTypeInternal() {}
  union {
    Bet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BetDefaultTypeInternal _Bet_default_instance_;

inline constexpr BallUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : recentruns_{},
        _recentruns_cached_byte_size_{0},
        striker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nonstriker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bowler_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        innings_{0},
        targetscore_{0},
        currentscore_{0},
        wicketsleft_{0},
        pitchmodifier_{0},
        ballsremaining_{0},
        iswicket_{false},
        isdot_{false},
        isextra_{false},
        isboundary_{false},
        runs_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BallUpdate::BallUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BallUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BallUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BallUpdateDefaultTypeInternal() {}
  union {
    BallUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BallUpdateDefaultTypeInternal _BallUpdate_default_instance_;

inline constexpr Ack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Ack::Ack(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDefaultTypeInternal _Ack_default_instance_;

inline constexpr MatchStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gameid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        update_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MatchStateRequest::MatchStateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MatchStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchStateRequestDefaultTypeInternal() {}
  union {
    MatchStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchStateRequestDefaultTypeInternal _MatchStateRequest_default_instance_;

inline constexpr BetRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gameid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bet_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BetRequest::BetRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BetRequestDefaultTypeInternal() {}
  union {
    BetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BetRequestDefaultTypeInternal _BetRequest_default_instance_;
}  // namespace odds
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_odds_5fengine_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_odds_5fengine_2eproto = nullptr;
const ::uint32_t
    TableStruct_odds_5fengine_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::odds::SetInitialOddsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::SetInitialOddsRequest, _impl_.game_id_),
        PROTOBUF_FIELD_OFFSET(::odds::SetInitialOddsRequest, _impl_.market_),
        PROTOBUF_FIELD_OFFSET(::odds::SetInitialOddsRequest, _impl_.initialprobability_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::odds::Ack, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::Ack, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::odds::Ack, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.innings_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.targetscore_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.currentscore_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.wicketsleft_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.ballsremaining_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.recentruns_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.striker_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.nonstriker_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.pitchmodifier_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.iswicket_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.isdot_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.isextra_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.isboundary_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.bowler_),
        PROTOBUF_FIELD_OFFSET(::odds::BallUpdate, _impl_.runs_),
        PROTOBUF_FIELD_OFFSET(::odds::MatchStateRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::odds::MatchStateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::MatchStateRequest, _impl_.gameid_),
        PROTOBUF_FIELD_OFFSET(::odds::MatchStateRequest, _impl_.update_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::odds::Bet, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::Bet, _impl_.userid_),
        PROTOBUF_FIELD_OFFSET(::odds::Bet, _impl_.stake_),
        PROTOBUF_FIELD_OFFSET(::odds::Bet, _impl_.odds_),
        PROTOBUF_FIELD_OFFSET(::odds::Bet, _impl_.market_),
        PROTOBUF_FIELD_OFFSET(::odds::Bet, _impl_.teama_),
        PROTOBUF_FIELD_OFFSET(::odds::BetRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::odds::BetRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::BetRequest, _impl_.gameid_),
        PROTOBUF_FIELD_OFFSET(::odds::BetRequest, _impl_.bet_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::odds::OddsQueryRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::OddsQueryRequest, _impl_.gameid_),
        PROTOBUF_FIELD_OFFSET(::odds::OddsQueryRequest, _impl_.market_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::odds::OddsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::odds::OddsResponse, _impl_.winprobability_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::odds::SetInitialOddsRequest)},
        {11, -1, -1, sizeof(::odds::Ack)},
        {21, -1, -1, sizeof(::odds::BallUpdate)},
        {44, 54, -1, sizeof(::odds::MatchStateRequest)},
        {56, -1, -1, sizeof(::odds::Bet)},
        {69, 79, -1, sizeof(::odds::BetRequest)},
        {81, -1, -1, sizeof(::odds::OddsQueryRequest)},
        {91, -1, -1, sizeof(::odds::OddsResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::odds::_SetInitialOddsRequest_default_instance_._instance,
    &::odds::_Ack_default_instance_._instance,
    &::odds::_BallUpdate_default_instance_._instance,
    &::odds::_MatchStateRequest_default_instance_._instance,
    &::odds::_Bet_default_instance_._instance,
    &::odds::_BetRequest_default_instance_._instance,
    &::odds::_OddsQueryRequest_default_instance_._instance,
    &::odds::_OddsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_odds_5fengine_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021odds_engine.proto\022\004odds\"T\n\025SetInitialO"
    "ddsRequest\022\017\n\007game_id\030\001 \001(\t\022\016\n\006market\030\002 "
    "\001(\t\022\032\n\022initialProbability\030\003 \001(\001\"\'\n\003Ack\022\017"
    "\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\251\002\n\nBal"
    "lUpdate\022\017\n\007innings\030\001 \001(\005\022\023\n\013targetScore\030"
    "\002 \001(\005\022\024\n\014currentScore\030\003 \001(\005\022\023\n\013wicketsLe"
    "ft\030\004 \001(\005\022\026\n\016ballsRemaining\030\005 \001(\005\022\022\n\nrece"
    "ntRuns\030\006 \003(\005\022\017\n\007striker\030\007 \001(\t\022\022\n\nnonStri"
    "ker\030\010 \001(\t\022\025\n\rpitchModifier\030\t \001(\001\022\020\n\010isWi"
    "cket\030\n \001(\010\022\r\n\005isDot\030\013 \001(\010\022\017\n\007isExtra\030\014 \001"
    "(\010\022\022\n\nisBoundary\030\r \001(\010\022\016\n\006bowler\030\016 \001(\t\022\014"
    "\n\004runs\030\017 \001(\005\"E\n\021MatchStateRequest\022\016\n\006gam"
    "eId\030\001 \001(\t\022 \n\006update\030\002 \001(\0132\020.odds.BallUpd"
    "ate\"Q\n\003Bet\022\016\n\006userId\030\001 \001(\t\022\r\n\005stake\030\002 \001("
    "\001\022\014\n\004odds\030\003 \001(\001\022\016\n\006market\030\004 \001(\t\022\r\n\005teamA"
    "\030\005 \001(\010\"4\n\nBetRequest\022\016\n\006gameId\030\001 \001(\t\022\026\n\003"
    "bet\030\002 \001(\0132\t.odds.Bet\"2\n\020OddsQueryRequest"
    "\022\016\n\006gameId\030\001 \001(\t\022\016\n\006market\030\002 \001(\t\"&\n\014Odds"
    "Response\022\026\n\016winProbability\030\001 \001(\0012\360\001\n\nOdd"
    "sEngine\022\?\n\020UpdateMatchState\022\027.odds.Match"
    "StateRequest\032\022.odds.OddsResponse\0220\n\010Plac"
    "eBet\022\020.odds.BetRequest\032\022.odds.OddsRespon"
    "se\0225\n\007GetOdds\022\026.odds.OddsQueryRequest\032\022."
    "odds.OddsResponse\0228\n\016SetInitialOdds\022\033.od"
    "ds.SetInitialOddsRequest\032\t.odds.Ackb\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_odds_5fengine_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_odds_5fengine_2eproto = {
    false,
    false,
    1003,
    descriptor_table_protodef_odds_5fengine_2eproto,
    "odds_engine.proto",
    &descriptor_table_odds_5fengine_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_odds_5fengine_2eproto::offsets,
    file_level_enum_descriptors_odds_5fengine_2eproto,
    file_level_service_descriptors_odds_5fengine_2eproto,
};
namespace odds {
// ===================================================================

class SetInitialOddsRequest::_Internal {
 public:
};

SetInitialOddsRequest::SetInitialOddsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.SetInitialOddsRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetInitialOddsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::SetInitialOddsRequest& from_msg)
      : game_id_(arena, from.game_id_),
        market_(arena, from.market_),
        _cached_size_{0} {}

SetInitialOddsRequest::SetInitialOddsRequest(
    ::google::protobuf::Arena* arena,
    const SetInitialOddsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetInitialOddsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.initialprobability_ = from._impl_.initialprobability_;

  // @@protoc_insertion_point(copy_constructor:odds.SetInitialOddsRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetInitialOddsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : game_id_(arena),
        market_(arena),
        _cached_size_{0} {}

inline void SetInitialOddsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.initialprobability_ = {};
}
SetInitialOddsRequest::~SetInitialOddsRequest() {
  // @@protoc_insertion_point(destructor:odds.SetInitialOddsRequest)
  SharedDtor(*this);
}
inline void SetInitialOddsRequest::SharedDtor(MessageLite& self) {
  SetInitialOddsRequest& this_ = static_cast<SetInitialOddsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.game_id_.Destroy();
  this_._impl_.market_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SetInitialOddsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetInitialOddsRequest(arena);
}
constexpr auto SetInitialOddsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SetInitialOddsRequest),
                                            alignof(SetInitialOddsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetInitialOddsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetInitialOddsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetInitialOddsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetInitialOddsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetInitialOddsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetInitialOddsRequest>(), &SetInitialOddsRequest::ByteSizeLong,
            &SetInitialOddsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_._cached_size_),
        false,
    },
    &SetInitialOddsRequest::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetInitialOddsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 48, 2> SetInitialOddsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::SetInitialOddsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string game_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_.game_id_)}},
    // string market = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_.market_)}},
    // double initialProbability = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_.initialprobability_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string game_id = 1;
    {PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_.game_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market = 2;
    {PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_.market_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double initialProbability = 3;
    {PROTOBUF_FIELD_OFFSET(SetInitialOddsRequest, _impl_.initialprobability_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\32\7\6\0\0\0\0\0"
    "odds.SetInitialOddsRequest"
    "game_id"
    "market"
  }},
};

PROTOBUF_NOINLINE void SetInitialOddsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.SetInitialOddsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_id_.ClearToEmpty();
  _impl_.market_.ClearToEmpty();
  _impl_.initialprobability_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetInitialOddsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetInitialOddsRequest& this_ = static_cast<const SetInitialOddsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetInitialOddsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetInitialOddsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.SetInitialOddsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string game_id = 1;
          if (!this_._internal_game_id().empty()) {
            const std::string& _s = this_._internal_game_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.SetInitialOddsRequest.game_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string market = 2;
          if (!this_._internal_market().empty()) {
            const std::string& _s = this_._internal_market();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.SetInitialOddsRequest.market");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // double initialProbability = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_initialprobability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_initialprobability(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.SetInitialOddsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetInitialOddsRequest::ByteSizeLong(const MessageLite& base) {
          const SetInitialOddsRequest& this_ = static_cast<const SetInitialOddsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetInitialOddsRequest::ByteSizeLong() const {
          const SetInitialOddsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.SetInitialOddsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string game_id = 1;
            if (!this_._internal_game_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_id());
            }
            // string market = 2;
            if (!this_._internal_market().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market());
            }
            // double initialProbability = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_initialprobability()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetInitialOddsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetInitialOddsRequest*>(&to_msg);
  auto& from = static_cast<const SetInitialOddsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.SetInitialOddsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_id().empty()) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (!from._internal_market().empty()) {
    _this->_internal_set_market(from._internal_market());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_initialprobability()) != 0) {
    _this->_impl_.initialprobability_ = from._impl_.initialprobability_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetInitialOddsRequest::CopyFrom(const SetInitialOddsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.SetInitialOddsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetInitialOddsRequest::InternalSwap(SetInitialOddsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_id_, &other->_impl_.game_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_, &other->_impl_.market_, arena);
        swap(_impl_.initialprobability_, other->_impl_.initialprobability_);
}

::google::protobuf::Metadata SetInitialOddsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Ack::_Internal {
 public:
};

Ack::Ack(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.Ack)
}
inline PROTOBUF_NDEBUG_INLINE Ack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::Ack& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

Ack::Ack(
    ::google::protobuf::Arena* arena,
    const Ack& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Ack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:odds.Ack)
}
inline PROTOBUF_NDEBUG_INLINE Ack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void Ack::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
Ack::~Ack() {
  // @@protoc_insertion_point(destructor:odds.Ack)
  SharedDtor(*this);
}
inline void Ack::SharedDtor(MessageLite& self) {
  Ack& this_ = static_cast<Ack&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Ack::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Ack(arena);
}
constexpr auto Ack::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Ack),
                                            alignof(Ack));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Ack::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Ack_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Ack::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Ack>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Ack::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Ack>(), &Ack::ByteSizeLong,
            &Ack::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Ack, _impl_._cached_size_),
        false,
    },
    &Ack::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Ack::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 24, 2> Ack::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::Ack>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Ack, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Ack, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Ack, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(Ack, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(Ack, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\10\0\7\0\0\0\0\0"
    "odds.Ack"
    "message"
  }},
};

PROTOBUF_NOINLINE void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.Ack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Ack::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Ack& this_ = static_cast<const Ack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Ack::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Ack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.Ack)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.Ack.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.Ack)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Ack::ByteSizeLong(const MessageLite& base) {
          const Ack& this_ = static_cast<const Ack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Ack::ByteSizeLong() const {
          const Ack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.Ack)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Ack::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Ack*>(&to_msg);
  auto& from = static_cast<const Ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.Ack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Ack::InternalSwap(Ack* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BallUpdate::_Internal {
 public:
};

BallUpdate::BallUpdate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.BallUpdate)
}
inline PROTOBUF_NDEBUG_INLINE BallUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::BallUpdate& from_msg)
      : recentruns_{visibility, arena, from.recentruns_},
        _recentruns_cached_byte_size_{0},
        striker_(arena, from.striker_),
        nonstriker_(arena, from.nonstriker_),
        bowler_(arena, from.bowler_),
        _cached_size_{0} {}

BallUpdate::BallUpdate(
    ::google::protobuf::Arena* arena,
    const BallUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BallUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, innings_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, innings_),
           offsetof(Impl_, runs_) -
               offsetof(Impl_, innings_) +
               sizeof(Impl_::runs_));

  // @@protoc_insertion_point(copy_constructor:odds.BallUpdate)
}
inline PROTOBUF_NDEBUG_INLINE BallUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : recentruns_{visibility, arena},
        _recentruns_cached_byte_size_{0},
        striker_(arena),
        nonstriker_(arena),
        bowler_(arena),
        _cached_size_{0} {}

inline void BallUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, innings_),
           0,
           offsetof(Impl_, runs_) -
               offsetof(Impl_, innings_) +
               sizeof(Impl_::runs_));
}
BallUpdate::~BallUpdate() {
  // @@protoc_insertion_point(destructor:odds.BallUpdate)
  SharedDtor(*this);
}
inline void BallUpdate::SharedDtor(MessageLite& self) {
  BallUpdate& this_ = static_cast<BallUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.striker_.Destroy();
  this_._impl_.nonstriker_.Destroy();
  this_._impl_.bowler_.Destroy();
  this_._impl_.~Impl_();
}

inline void* BallUpdate::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BallUpdate(arena);
}
constexpr auto BallUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.recentruns_) +
          decltype(BallUpdate::_impl_.recentruns_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(BallUpdate), alignof(BallUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BallUpdate::PlacementNew_,
                                 sizeof(BallUpdate),
                                 alignof(BallUpdate));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BallUpdate::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BallUpdate_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BallUpdate::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BallUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BallUpdate::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BallUpdate>(), &BallUpdate::ByteSizeLong,
            &BallUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_._cached_size_),
        false,
    },
    &BallUpdate::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BallUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 0, 55, 2> BallUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::BallUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 innings = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallUpdate, _impl_.innings_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.innings_)}},
    // int32 targetScore = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallUpdate, _impl_.targetscore_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.targetscore_)}},
    // int32 currentScore = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallUpdate, _impl_.currentscore_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.currentscore_)}},
    // int32 wicketsLeft = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallUpdate, _impl_.wicketsleft_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.wicketsleft_)}},
    // int32 ballsRemaining = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallUpdate, _impl_.ballsremaining_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.ballsremaining_)}},
    // repeated int32 recentRuns = 6;
    {::_pbi::TcParser::FastV32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.recentruns_)}},
    // string striker = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.striker_)}},
    // string nonStriker = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.nonstriker_)}},
    // double pitchModifier = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.pitchmodifier_)}},
    // bool isWicket = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BallUpdate, _impl_.iswicket_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.iswicket_)}},
    // bool isDot = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BallUpdate, _impl_.isdot_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.isdot_)}},
    // bool isExtra = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BallUpdate, _impl_.isextra_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.isextra_)}},
    // bool isBoundary = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BallUpdate, _impl_.isboundary_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.isboundary_)}},
    // string bowler = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.bowler_)}},
    // int32 runs = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BallUpdate, _impl_.runs_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.runs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 innings = 1;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.innings_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 targetScore = 2;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.targetscore_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 currentScore = 3;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.currentscore_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 wicketsLeft = 4;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.wicketsleft_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ballsRemaining = 5;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.ballsremaining_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 recentRuns = 6;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.recentruns_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // string striker = 7;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.striker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nonStriker = 8;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.nonstriker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double pitchModifier = 9;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.pitchmodifier_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool isWicket = 10;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.iswicket_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool isDot = 11;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.isdot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool isExtra = 12;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.isextra_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool isBoundary = 13;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.isboundary_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string bowler = 14;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.bowler_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 runs = 15;
    {PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.runs_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\17\0\0\0\0\0\0\7\12\0\0\0\0\0\6\0"
    "odds.BallUpdate"
    "striker"
    "nonStriker"
    "bowler"
  }},
};

PROTOBUF_NOINLINE void BallUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.BallUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recentruns_.Clear();
  _impl_.striker_.ClearToEmpty();
  _impl_.nonstriker_.ClearToEmpty();
  _impl_.bowler_.ClearToEmpty();
  ::memset(&_impl_.innings_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.runs_) -
      reinterpret_cast<char*>(&_impl_.innings_)) + sizeof(_impl_.runs_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BallUpdate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BallUpdate& this_ = static_cast<const BallUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BallUpdate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BallUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.BallUpdate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 innings = 1;
          if (this_._internal_innings() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_innings(), target);
          }

          // int32 targetScore = 2;
          if (this_._internal_targetscore() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_targetscore(), target);
          }

          // int32 currentScore = 3;
          if (this_._internal_currentscore() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_currentscore(), target);
          }

          // int32 wicketsLeft = 4;
          if (this_._internal_wicketsleft() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_wicketsleft(), target);
          }

          // int32 ballsRemaining = 5;
          if (this_._internal_ballsremaining() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_ballsremaining(), target);
          }

          // repeated int32 recentRuns = 6;
          {
            int byte_size = this_._impl_._recentruns_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  6, this_._internal_recentruns(), byte_size, target);
            }
          }

          // string striker = 7;
          if (!this_._internal_striker().empty()) {
            const std::string& _s = this_._internal_striker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.BallUpdate.striker");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string nonStriker = 8;
          if (!this_._internal_nonstriker().empty()) {
            const std::string& _s = this_._internal_nonstriker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.BallUpdate.nonStriker");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // double pitchModifier = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pitchmodifier()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_pitchmodifier(), target);
          }

          // bool isWicket = 10;
          if (this_._internal_iswicket() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_iswicket(), target);
          }

          // bool isDot = 11;
          if (this_._internal_isdot() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_isdot(), target);
          }

          // bool isExtra = 12;
          if (this_._internal_isextra() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_isextra(), target);
          }

          // bool isBoundary = 13;
          if (this_._internal_isboundary() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_isboundary(), target);
          }

          // string bowler = 14;
          if (!this_._internal_bowler().empty()) {
            const std::string& _s = this_._internal_bowler();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.BallUpdate.bowler");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // int32 runs = 15;
          if (this_._internal_runs() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<15>(
                    stream, this_._internal_runs(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.BallUpdate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BallUpdate::ByteSizeLong(const MessageLite& base) {
          const BallUpdate& this_ = static_cast<const BallUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BallUpdate::ByteSizeLong() const {
          const BallUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.BallUpdate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 recentRuns = 6;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_recentruns(), 1,
                      this_._impl_._recentruns_cached_byte_size_);
            }
          }
           {
            // string striker = 7;
            if (!this_._internal_striker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_striker());
            }
            // string nonStriker = 8;
            if (!this_._internal_nonstriker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nonstriker());
            }
            // string bowler = 14;
            if (!this_._internal_bowler().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bowler());
            }
            // int32 innings = 1;
            if (this_._internal_innings() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_innings());
            }
            // int32 targetScore = 2;
            if (this_._internal_targetscore() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_targetscore());
            }
            // int32 currentScore = 3;
            if (this_._internal_currentscore() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_currentscore());
            }
            // int32 wicketsLeft = 4;
            if (this_._internal_wicketsleft() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_wicketsleft());
            }
            // double pitchModifier = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pitchmodifier()) != 0) {
              total_size += 9;
            }
            // int32 ballsRemaining = 5;
            if (this_._internal_ballsremaining() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ballsremaining());
            }
            // bool isWicket = 10;
            if (this_._internal_iswicket() != 0) {
              total_size += 2;
            }
            // bool isDot = 11;
            if (this_._internal_isdot() != 0) {
              total_size += 2;
            }
            // bool isExtra = 12;
            if (this_._internal_isextra() != 0) {
              total_size += 2;
            }
            // bool isBoundary = 13;
            if (this_._internal_isboundary() != 0) {
              total_size += 2;
            }
            // int32 runs = 15;
            if (this_._internal_runs() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_runs());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BallUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BallUpdate*>(&to_msg);
  auto& from = static_cast<const BallUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.BallUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_recentruns()->MergeFrom(from._internal_recentruns());
  if (!from._internal_striker().empty()) {
    _this->_internal_set_striker(from._internal_striker());
  }
  if (!from._internal_nonstriker().empty()) {
    _this->_internal_set_nonstriker(from._internal_nonstriker());
  }
  if (!from._internal_bowler().empty()) {
    _this->_internal_set_bowler(from._internal_bowler());
  }
  if (from._internal_innings() != 0) {
    _this->_impl_.innings_ = from._impl_.innings_;
  }
  if (from._internal_targetscore() != 0) {
    _this->_impl_.targetscore_ = from._impl_.targetscore_;
  }
  if (from._internal_currentscore() != 0) {
    _this->_impl_.currentscore_ = from._impl_.currentscore_;
  }
  if (from._internal_wicketsleft() != 0) {
    _this->_impl_.wicketsleft_ = from._impl_.wicketsleft_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pitchmodifier()) != 0) {
    _this->_impl_.pitchmodifier_ = from._impl_.pitchmodifier_;
  }
  if (from._internal_ballsremaining() != 0) {
    _this->_impl_.ballsremaining_ = from._impl_.ballsremaining_;
  }
  if (from._internal_iswicket() != 0) {
    _this->_impl_.iswicket_ = from._impl_.iswicket_;
  }
  if (from._internal_isdot() != 0) {
    _this->_impl_.isdot_ = from._impl_.isdot_;
  }
  if (from._internal_isextra() != 0) {
    _this->_impl_.isextra_ = from._impl_.isextra_;
  }
  if (from._internal_isboundary() != 0) {
    _this->_impl_.isboundary_ = from._impl_.isboundary_;
  }
  if (from._internal_runs() != 0) {
    _this->_impl_.runs_ = from._impl_.runs_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BallUpdate::CopyFrom(const BallUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.BallUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BallUpdate::InternalSwap(BallUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.recentruns_.InternalSwap(&other->_impl_.recentruns_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.striker_, &other->_impl_.striker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nonstriker_, &other->_impl_.nonstriker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bowler_, &other->_impl_.bowler_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.runs_)
      + sizeof(BallUpdate::_impl_.runs_)
      - PROTOBUF_FIELD_OFFSET(BallUpdate, _impl_.innings_)>(
          reinterpret_cast<char*>(&_impl_.innings_),
          reinterpret_cast<char*>(&other->_impl_.innings_));
}

::google::protobuf::Metadata BallUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MatchStateRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MatchStateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_._has_bits_);
};

MatchStateRequest::MatchStateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.MatchStateRequest)
}
inline PROTOBUF_NDEBUG_INLINE MatchStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::MatchStateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gameid_(arena, from.gameid_) {}

MatchStateRequest::MatchStateRequest(
    ::google::protobuf::Arena* arena,
    const MatchStateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MatchStateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.update_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::odds::BallUpdate>(
                              arena, *from._impl_.update_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:odds.MatchStateRequest)
}
inline PROTOBUF_NDEBUG_INLINE MatchStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        gameid_(arena) {}

inline void MatchStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.update_ = {};
}
MatchStateRequest::~MatchStateRequest() {
  // @@protoc_insertion_point(destructor:odds.MatchStateRequest)
  SharedDtor(*this);
}
inline void MatchStateRequest::SharedDtor(MessageLite& self) {
  MatchStateRequest& this_ = static_cast<MatchStateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.gameid_.Destroy();
  delete this_._impl_.update_;
  this_._impl_.~Impl_();
}

inline void* MatchStateRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MatchStateRequest(arena);
}
constexpr auto MatchStateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MatchStateRequest),
                                            alignof(MatchStateRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MatchStateRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MatchStateRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MatchStateRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MatchStateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MatchStateRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MatchStateRequest>(), &MatchStateRequest::ByteSizeLong,
            &MatchStateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_._cached_size_),
        false,
    },
    &MatchStateRequest::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MatchStateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 37, 2> MatchStateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::MatchStateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .odds.BallUpdate update = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_.update_)}},
    // string gameId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_.gameid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string gameId = 1;
    {PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_.gameid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .odds.BallUpdate update = 2;
    {PROTOBUF_FIELD_OFFSET(MatchStateRequest, _impl_.update_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::odds::BallUpdate>()},
  }}, {{
    "\26\6\0\0\0\0\0\0"
    "odds.MatchStateRequest"
    "gameId"
  }},
};

PROTOBUF_NOINLINE void MatchStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.MatchStateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.update_ != nullptr);
    _impl_.update_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MatchStateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MatchStateRequest& this_ = static_cast<const MatchStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MatchStateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MatchStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.MatchStateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string gameId = 1;
          if (!this_._internal_gameid().empty()) {
            const std::string& _s = this_._internal_gameid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.MatchStateRequest.gameId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .odds.BallUpdate update = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.update_, this_._impl_.update_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.MatchStateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MatchStateRequest::ByteSizeLong(const MessageLite& base) {
          const MatchStateRequest& this_ = static_cast<const MatchStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MatchStateRequest::ByteSizeLong() const {
          const MatchStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.MatchStateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string gameId = 1;
            if (!this_._internal_gameid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_gameid());
            }
          }
           {
            // .odds.BallUpdate update = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.update_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MatchStateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MatchStateRequest*>(&to_msg);
  auto& from = static_cast<const MatchStateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.MatchStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gameid().empty()) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.update_ != nullptr);
    if (_this->_impl_.update_ == nullptr) {
      _this->_impl_.update_ =
          ::google::protobuf::Message::CopyConstruct<::odds::BallUpdate>(arena, *from._impl_.update_);
    } else {
      _this->_impl_.update_->MergeFrom(*from._impl_.update_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MatchStateRequest::CopyFrom(const MatchStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.MatchStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MatchStateRequest::InternalSwap(MatchStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gameid_, &other->_impl_.gameid_, arena);
  swap(_impl_.update_, other->_impl_.update_);
}

::google::protobuf::Metadata MatchStateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bet::_Internal {
 public:
};

Bet::Bet(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.Bet)
}
inline PROTOBUF_NDEBUG_INLINE Bet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::Bet& from_msg)
      : userid_(arena, from.userid_),
        market_(arena, from.market_),
        _cached_size_{0} {}

Bet::Bet(
    ::google::protobuf::Arena* arena,
    const Bet& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stake_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, stake_),
           offsetof(Impl_, teama_) -
               offsetof(Impl_, stake_) +
               sizeof(Impl_::teama_));

  // @@protoc_insertion_point(copy_constructor:odds.Bet)
}
inline PROTOBUF_NDEBUG_INLINE Bet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : userid_(arena),
        market_(arena),
        _cached_size_{0} {}

inline void Bet::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stake_),
           0,
           offsetof(Impl_, teama_) -
               offsetof(Impl_, stake_) +
               sizeof(Impl_::teama_));
}
Bet::~Bet() {
  // @@protoc_insertion_point(destructor:odds.Bet)
  SharedDtor(*this);
}
inline void Bet::SharedDtor(MessageLite& self) {
  Bet& this_ = static_cast<Bet&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.userid_.Destroy();
  this_._impl_.market_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Bet::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Bet(arena);
}
constexpr auto Bet::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Bet),
                                            alignof(Bet));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Bet::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Bet_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Bet::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Bet>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Bet::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Bet>(), &Bet::ByteSizeLong,
            &Bet::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Bet, _impl_._cached_size_),
        false,
    },
    &Bet::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Bet::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 29, 2> Bet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::Bet>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string userId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Bet, _impl_.userid_)}},
    // double stake = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Bet, _impl_.stake_)}},
    // double odds = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Bet, _impl_.odds_)}},
    // string market = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Bet, _impl_.market_)}},
    // bool teamA = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Bet, _impl_.teama_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Bet, _impl_.teama_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string userId = 1;
    {PROTOBUF_FIELD_OFFSET(Bet, _impl_.userid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double stake = 2;
    {PROTOBUF_FIELD_OFFSET(Bet, _impl_.stake_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double odds = 3;
    {PROTOBUF_FIELD_OFFSET(Bet, _impl_.odds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string market = 4;
    {PROTOBUF_FIELD_OFFSET(Bet, _impl_.market_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool teamA = 5;
    {PROTOBUF_FIELD_OFFSET(Bet, _impl_.teama_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\10\6\0\0\6\0\0\0"
    "odds.Bet"
    "userId"
    "market"
  }},
};

PROTOBUF_NOINLINE void Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.Bet)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.market_.ClearToEmpty();
  ::memset(&_impl_.stake_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.teama_) -
      reinterpret_cast<char*>(&_impl_.stake_)) + sizeof(_impl_.teama_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bet::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bet& this_ = static_cast<const Bet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bet::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.Bet)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string userId = 1;
          if (!this_._internal_userid().empty()) {
            const std::string& _s = this_._internal_userid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.Bet.userId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double stake = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_stake()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_stake(), target);
          }

          // double odds = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_odds()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_odds(), target);
          }

          // string market = 4;
          if (!this_._internal_market().empty()) {
            const std::string& _s = this_._internal_market();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.Bet.market");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool teamA = 5;
          if (this_._internal_teama() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_teama(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.Bet)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bet::ByteSizeLong(const MessageLite& base) {
          const Bet& this_ = static_cast<const Bet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bet::ByteSizeLong() const {
          const Bet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.Bet)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string userId = 1;
            if (!this_._internal_userid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_userid());
            }
            // string market = 4;
            if (!this_._internal_market().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market());
            }
            // double stake = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_stake()) != 0) {
              total_size += 9;
            }
            // double odds = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_odds()) != 0) {
              total_size += 9;
            }
            // bool teamA = 5;
            if (this_._internal_teama() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bet::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bet*>(&to_msg);
  auto& from = static_cast<const Bet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.Bet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_market().empty()) {
    _this->_internal_set_market(from._internal_market());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_stake()) != 0) {
    _this->_impl_.stake_ = from._impl_.stake_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_odds()) != 0) {
    _this->_impl_.odds_ = from._impl_.odds_;
  }
  if (from._internal_teama() != 0) {
    _this->_impl_.teama_ = from._impl_.teama_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bet::CopyFrom(const Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bet::InternalSwap(Bet* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, &other->_impl_.userid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_, &other->_impl_.market_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bet, _impl_.teama_)
      + sizeof(Bet::_impl_.teama_)
      - PROTOBUF_FIELD_OFFSET(Bet, _impl_.stake_)>(
          reinterpret_cast<char*>(&_impl_.stake_),
          reinterpret_cast<char*>(&other->_impl_.stake_));
}

::google::protobuf::Metadata Bet::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BetRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BetRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BetRequest, _impl_._has_bits_);
};

BetRequest::BetRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.BetRequest)
}
inline PROTOBUF_NDEBUG_INLINE BetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::BetRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gameid_(arena, from.gameid_) {}

BetRequest::BetRequest(
    ::google::protobuf::Arena* arena,
    const BetRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bet_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::odds::Bet>(
                              arena, *from._impl_.bet_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:odds.BetRequest)
}
inline PROTOBUF_NDEBUG_INLINE BetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        gameid_(arena) {}

inline void BetRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.bet_ = {};
}
BetRequest::~BetRequest() {
  // @@protoc_insertion_point(destructor:odds.BetRequest)
  SharedDtor(*this);
}
inline void BetRequest::SharedDtor(MessageLite& self) {
  BetRequest& this_ = static_cast<BetRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.gameid_.Destroy();
  delete this_._impl_.bet_;
  this_._impl_.~Impl_();
}

inline void* BetRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BetRequest(arena);
}
constexpr auto BetRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(BetRequest),
                                            alignof(BetRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BetRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BetRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BetRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BetRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BetRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BetRequest>(), &BetRequest::ByteSizeLong,
            &BetRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BetRequest, _impl_._cached_size_),
        false,
    },
    &BetRequest::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BetRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 30, 2> BetRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BetRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::BetRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .odds.Bet bet = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BetRequest, _impl_.bet_)}},
    // string gameId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BetRequest, _impl_.gameid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string gameId = 1;
    {PROTOBUF_FIELD_OFFSET(BetRequest, _impl_.gameid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .odds.Bet bet = 2;
    {PROTOBUF_FIELD_OFFSET(BetRequest, _impl_.bet_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::odds::Bet>()},
  }}, {{
    "\17\6\0\0\0\0\0\0"
    "odds.BetRequest"
    "gameId"
  }},
};

PROTOBUF_NOINLINE void BetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.BetRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bet_ != nullptr);
    _impl_.bet_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BetRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BetRequest& this_ = static_cast<const BetRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BetRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BetRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.BetRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string gameId = 1;
          if (!this_._internal_gameid().empty()) {
            const std::string& _s = this_._internal_gameid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.BetRequest.gameId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .odds.Bet bet = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.bet_, this_._impl_.bet_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.BetRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BetRequest::ByteSizeLong(const MessageLite& base) {
          const BetRequest& this_ = static_cast<const BetRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BetRequest::ByteSizeLong() const {
          const BetRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.BetRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string gameId = 1;
            if (!this_._internal_gameid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_gameid());
            }
          }
           {
            // .odds.Bet bet = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bet_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BetRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BetRequest*>(&to_msg);
  auto& from = static_cast<const BetRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.BetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gameid().empty()) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bet_ != nullptr);
    if (_this->_impl_.bet_ == nullptr) {
      _this->_impl_.bet_ =
          ::google::protobuf::Message::CopyConstruct<::odds::Bet>(arena, *from._impl_.bet_);
    } else {
      _this->_impl_.bet_->MergeFrom(*from._impl_.bet_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BetRequest::CopyFrom(const BetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.BetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BetRequest::InternalSwap(BetRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gameid_, &other->_impl_.gameid_, arena);
  swap(_impl_.bet_, other->_impl_.bet_);
}

::google::protobuf::Metadata BetRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OddsQueryRequest::_Internal {
 public:
};

OddsQueryRequest::OddsQueryRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.OddsQueryRequest)
}
inline PROTOBUF_NDEBUG_INLINE OddsQueryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::odds::OddsQueryRequest& from_msg)
      : gameid_(arena, from.gameid_),
        market_(arena, from.market_),
        _cached_size_{0} {}

OddsQueryRequest::OddsQueryRequest(
    ::google::protobuf::Arena* arena,
    const OddsQueryRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OddsQueryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:odds.OddsQueryRequest)
}
inline PROTOBUF_NDEBUG_INLINE OddsQueryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : gameid_(arena),
        market_(arena),
        _cached_size_{0} {}

inline void OddsQueryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OddsQueryRequest::~OddsQueryRequest() {
  // @@protoc_insertion_point(destructor:odds.OddsQueryRequest)
  SharedDtor(*this);
}
inline void OddsQueryRequest::SharedDtor(MessageLite& self) {
  OddsQueryRequest& this_ = static_cast<OddsQueryRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.gameid_.Destroy();
  this_._impl_.market_.Destroy();
  this_._impl_.~Impl_();
}

inline void* OddsQueryRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OddsQueryRequest(arena);
}
constexpr auto OddsQueryRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(OddsQueryRequest),
                                            alignof(OddsQueryRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OddsQueryRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OddsQueryRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OddsQueryRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OddsQueryRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OddsQueryRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OddsQueryRequest>(), &OddsQueryRequest::ByteSizeLong,
            &OddsQueryRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OddsQueryRequest, _impl_._cached_size_),
        false,
    },
    &OddsQueryRequest::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OddsQueryRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 42, 2> OddsQueryRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::OddsQueryRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string market = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OddsQueryRequest, _impl_.market_)}},
    // string gameId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OddsQueryRequest, _impl_.gameid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string gameId = 1;
    {PROTOBUF_FIELD_OFFSET(OddsQueryRequest, _impl_.gameid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market = 2;
    {PROTOBUF_FIELD_OFFSET(OddsQueryRequest, _impl_.market_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\6\6\0\0\0\0\0"
    "odds.OddsQueryRequest"
    "gameId"
    "market"
  }},
};

PROTOBUF_NOINLINE void OddsQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.OddsQueryRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameid_.ClearToEmpty();
  _impl_.market_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OddsQueryRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OddsQueryRequest& this_ = static_cast<const OddsQueryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OddsQueryRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OddsQueryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.OddsQueryRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string gameId = 1;
          if (!this_._internal_gameid().empty()) {
            const std::string& _s = this_._internal_gameid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.OddsQueryRequest.gameId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string market = 2;
          if (!this_._internal_market().empty()) {
            const std::string& _s = this_._internal_market();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "odds.OddsQueryRequest.market");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.OddsQueryRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OddsQueryRequest::ByteSizeLong(const MessageLite& base) {
          const OddsQueryRequest& this_ = static_cast<const OddsQueryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OddsQueryRequest::ByteSizeLong() const {
          const OddsQueryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.OddsQueryRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string gameId = 1;
            if (!this_._internal_gameid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_gameid());
            }
            // string market = 2;
            if (!this_._internal_market().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OddsQueryRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OddsQueryRequest*>(&to_msg);
  auto& from = static_cast<const OddsQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.OddsQueryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gameid().empty()) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  if (!from._internal_market().empty()) {
    _this->_internal_set_market(from._internal_market());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OddsQueryRequest::CopyFrom(const OddsQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.OddsQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OddsQueryRequest::InternalSwap(OddsQueryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gameid_, &other->_impl_.gameid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_, &other->_impl_.market_, arena);
}

::google::protobuf::Metadata OddsQueryRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OddsResponse::_Internal {
 public:
};

OddsResponse::OddsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:odds.OddsResponse)
}
OddsResponse::OddsResponse(
    ::google::protobuf::Arena* arena, const OddsResponse& from)
    : OddsResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE OddsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OddsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.winprobability_ = {};
}
OddsResponse::~OddsResponse() {
  // @@protoc_insertion_point(destructor:odds.OddsResponse)
  SharedDtor(*this);
}
inline void OddsResponse::SharedDtor(MessageLite& self) {
  OddsResponse& this_ = static_cast<OddsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* OddsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OddsResponse(arena);
}
constexpr auto OddsResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(OddsResponse),
                                            alignof(OddsResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OddsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OddsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OddsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OddsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OddsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OddsResponse>(), &OddsResponse::ByteSizeLong,
            &OddsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OddsResponse, _impl_._cached_size_),
        false,
    },
    &OddsResponse::kDescriptorMethods,
    &descriptor_table_odds_5fengine_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OddsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> OddsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::odds::OddsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double winProbability = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(OddsResponse, _impl_.winprobability_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double winProbability = 1;
    {PROTOBUF_FIELD_OFFSET(OddsResponse, _impl_.winprobability_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void OddsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:odds.OddsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winprobability_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OddsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OddsResponse& this_ = static_cast<const OddsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OddsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OddsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:odds.OddsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double winProbability = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_winprobability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_winprobability(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:odds.OddsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OddsResponse::ByteSizeLong(const MessageLite& base) {
          const OddsResponse& this_ = static_cast<const OddsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OddsResponse::ByteSizeLong() const {
          const OddsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:odds.OddsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // double winProbability = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_winprobability()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OddsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OddsResponse*>(&to_msg);
  auto& from = static_cast<const OddsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:odds.OddsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_winprobability()) != 0) {
    _this->_impl_.winprobability_ = from._impl_.winprobability_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OddsResponse::CopyFrom(const OddsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odds.OddsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OddsResponse::InternalSwap(OddsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.winprobability_, other->_impl_.winprobability_);
}

::google::protobuf::Metadata OddsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace odds
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_odds_5fengine_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
