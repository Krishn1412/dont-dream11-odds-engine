// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odds_engine.proto
// Protobuf C++ Version: 5.29.3

#ifndef odds_5fengine_2eproto_2epb_2eh
#define odds_5fengine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_odds_5fengine_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_odds_5fengine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_odds_5fengine_2eproto;
namespace odds {
class BallUpdate;
struct BallUpdateDefaultTypeInternal;
extern BallUpdateDefaultTypeInternal _BallUpdate_default_instance_;
class BallUpdate_BowlerImpactEntry_DoNotUse;
struct BallUpdate_BowlerImpactEntry_DoNotUseDefaultTypeInternal;
extern BallUpdate_BowlerImpactEntry_DoNotUseDefaultTypeInternal _BallUpdate_BowlerImpactEntry_DoNotUse_default_instance_;
class Bet;
struct BetDefaultTypeInternal;
extern BetDefaultTypeInternal _Bet_default_instance_;
class OddsResponse;
struct OddsResponseDefaultTypeInternal;
extern OddsResponseDefaultTypeInternal _OddsResponse_default_instance_;
}  // namespace odds
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace odds {

// ===================================================================


// -------------------------------------------------------------------

class OddsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.OddsResponse) */ {
 public:
  inline OddsResponse() : OddsResponse(nullptr) {}
  ~OddsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OddsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OddsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OddsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline OddsResponse(const OddsResponse& from) : OddsResponse(nullptr, from) {}
  inline OddsResponse(OddsResponse&& from) noexcept
      : OddsResponse(nullptr, std::move(from)) {}
  inline OddsResponse& operator=(const OddsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OddsResponse& operator=(OddsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OddsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OddsResponse* internal_default_instance() {
    return reinterpret_cast<const OddsResponse*>(
        &_OddsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(OddsResponse& a, OddsResponse& b) { a.Swap(&b); }
  inline void Swap(OddsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OddsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OddsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OddsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OddsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OddsResponse& from) { OddsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OddsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.OddsResponse"; }

 protected:
  explicit OddsResponse(::google::protobuf::Arena* arena);
  OddsResponse(::google::protobuf::Arena* arena, const OddsResponse& from);
  OddsResponse(::google::protobuf::Arena* arena, OddsResponse&& from) noexcept
      : OddsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWinProbabilityFieldNumber = 1,
  };
  // double winProbability = 1;
  void clear_winprobability() ;
  double winprobability() const;
  void set_winprobability(double value);

  private:
  double _internal_winprobability() const;
  void _internal_set_winprobability(double value);

  public:
  // @@protoc_insertion_point(class_scope:odds.OddsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OddsResponse& from_msg);
    double winprobability_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Bet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.Bet) */ {
 public:
  inline Bet() : Bet(nullptr) {}
  ~Bet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Bet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Bet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Bet(
      ::google::protobuf::internal::ConstantInitialized);

  inline Bet(const Bet& from) : Bet(nullptr, from) {}
  inline Bet(Bet&& from) noexcept
      : Bet(nullptr, std::move(from)) {}
  inline Bet& operator=(const Bet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bet& operator=(Bet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bet* internal_default_instance() {
    return reinterpret_cast<const Bet*>(
        &_Bet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Bet& a, Bet& b) { a.Swap(&b); }
  inline void Swap(Bet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Bet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Bet& from) { Bet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Bet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.Bet"; }

 protected:
  explicit Bet(::google::protobuf::Arena* arena);
  Bet(::google::protobuf::Arena* arena, const Bet& from);
  Bet(::google::protobuf::Arena* arena, Bet&& from) noexcept
      : Bet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kMarketFieldNumber = 4,
    kStakeFieldNumber = 2,
    kOddsFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string market = 4;
  void clear_market() ;
  const std::string& market() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market(Arg_&& arg, Args_... args);
  std::string* mutable_market();
  PROTOBUF_NODISCARD std::string* release_market();
  void set_allocated_market(std::string* value);

  private:
  const std::string& _internal_market() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market(
      const std::string& value);
  std::string* _internal_mutable_market();

  public:
  // double stake = 2;
  void clear_stake() ;
  double stake() const;
  void set_stake(double value);

  private:
  double _internal_stake() const;
  void _internal_set_stake(double value);

  public:
  // double odds = 3;
  void clear_odds() ;
  double odds() const;
  void set_odds(double value);

  private:
  double _internal_odds() const;
  void _internal_set_odds(double value);

  public:
  // @@protoc_insertion_point(class_scope:odds.Bet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Bet& from_msg);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr market_;
    double stake_;
    double odds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class BallUpdate_BowlerImpactEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  BallUpdate_BowlerImpactEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BallUpdate_BowlerImpactEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BallUpdate_BowlerImpactEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const BallUpdate_BowlerImpactEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const BallUpdate_BowlerImpactEntry_DoNotUse*>(
        &_BallUpdate_BowlerImpactEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_odds_5fengine_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class BallUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.BallUpdate) */ {
 public:
  inline BallUpdate() : BallUpdate(nullptr) {}
  ~BallUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BallUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BallUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BallUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline BallUpdate(const BallUpdate& from) : BallUpdate(nullptr, from) {}
  inline BallUpdate(BallUpdate&& from) noexcept
      : BallUpdate(nullptr, std::move(from)) {}
  inline BallUpdate& operator=(const BallUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallUpdate& operator=(BallUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BallUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const BallUpdate* internal_default_instance() {
    return reinterpret_cast<const BallUpdate*>(
        &_BallUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BallUpdate& a, BallUpdate& b) { a.Swap(&b); }
  inline void Swap(BallUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BallUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BallUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BallUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BallUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BallUpdate& from) { BallUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BallUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.BallUpdate"; }

 protected:
  explicit BallUpdate(::google::protobuf::Arena* arena);
  BallUpdate(::google::protobuf::Arena* arena, const BallUpdate& from);
  BallUpdate(::google::protobuf::Arena* arena, BallUpdate&& from) noexcept
      : BallUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecentRunsFieldNumber = 6,
    kBowlerImpactFieldNumber = 7,
    kInningsFieldNumber = 1,
    kTargetScoreFieldNumber = 2,
    kCurrentScoreFieldNumber = 3,
    kWicketsLeftFieldNumber = 4,
    kPitchModifierFieldNumber = 8,
    kBallsRemainingFieldNumber = 5,
  };
  // repeated int32 recentRuns = 6;
  int recentruns_size() const;
  private:
  int _internal_recentruns_size() const;

  public:
  void clear_recentruns() ;
  ::int32_t recentruns(int index) const;
  void set_recentruns(int index, ::int32_t value);
  void add_recentruns(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& recentruns() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_recentruns();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_recentruns() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_recentruns();

  public:
  // map<string, double> bowlerImpact = 7;
  int bowlerimpact_size() const;
  private:
  int _internal_bowlerimpact_size() const;

  public:
  void clear_bowlerimpact() ;
  const ::google::protobuf::Map<std::string, double>& bowlerimpact() const;
  ::google::protobuf::Map<std::string, double>* mutable_bowlerimpact();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_bowlerimpact() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_bowlerimpact();

  public:
  // int32 innings = 1;
  void clear_innings() ;
  ::int32_t innings() const;
  void set_innings(::int32_t value);

  private:
  ::int32_t _internal_innings() const;
  void _internal_set_innings(::int32_t value);

  public:
  // int32 targetScore = 2;
  void clear_targetscore() ;
  ::int32_t targetscore() const;
  void set_targetscore(::int32_t value);

  private:
  ::int32_t _internal_targetscore() const;
  void _internal_set_targetscore(::int32_t value);

  public:
  // int32 currentScore = 3;
  void clear_currentscore() ;
  ::int32_t currentscore() const;
  void set_currentscore(::int32_t value);

  private:
  ::int32_t _internal_currentscore() const;
  void _internal_set_currentscore(::int32_t value);

  public:
  // int32 wicketsLeft = 4;
  void clear_wicketsleft() ;
  ::int32_t wicketsleft() const;
  void set_wicketsleft(::int32_t value);

  private:
  ::int32_t _internal_wicketsleft() const;
  void _internal_set_wicketsleft(::int32_t value);

  public:
  // double pitchModifier = 8;
  void clear_pitchmodifier() ;
  double pitchmodifier() const;
  void set_pitchmodifier(double value);

  private:
  double _internal_pitchmodifier() const;
  void _internal_set_pitchmodifier(double value);

  public:
  // int32 ballsRemaining = 5;
  void clear_ballsremaining() ;
  ::int32_t ballsremaining() const;
  void set_ballsremaining(::int32_t value);

  private:
  ::int32_t _internal_ballsremaining() const;
  void _internal_set_ballsremaining(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:odds.BallUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BallUpdate& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> recentruns_;
    ::google::protobuf::internal::CachedSize _recentruns_cached_byte_size_;
    ::google::protobuf::internal::MapField<BallUpdate_BowlerImpactEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        bowlerimpact_;
    ::int32_t innings_;
    ::int32_t targetscore_;
    ::int32_t currentscore_;
    ::int32_t wicketsleft_;
    double pitchmodifier_;
    ::int32_t ballsremaining_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BallUpdate

// int32 innings = 1;
inline void BallUpdate::clear_innings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.innings_ = 0;
}
inline ::int32_t BallUpdate::innings() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.innings)
  return _internal_innings();
}
inline void BallUpdate::set_innings(::int32_t value) {
  _internal_set_innings(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.innings)
}
inline ::int32_t BallUpdate::_internal_innings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.innings_;
}
inline void BallUpdate::_internal_set_innings(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.innings_ = value;
}

// int32 targetScore = 2;
inline void BallUpdate::clear_targetscore() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetscore_ = 0;
}
inline ::int32_t BallUpdate::targetscore() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.targetScore)
  return _internal_targetscore();
}
inline void BallUpdate::set_targetscore(::int32_t value) {
  _internal_set_targetscore(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.targetScore)
}
inline ::int32_t BallUpdate::_internal_targetscore() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetscore_;
}
inline void BallUpdate::_internal_set_targetscore(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetscore_ = value;
}

// int32 currentScore = 3;
inline void BallUpdate::clear_currentscore() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currentscore_ = 0;
}
inline ::int32_t BallUpdate::currentscore() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.currentScore)
  return _internal_currentscore();
}
inline void BallUpdate::set_currentscore(::int32_t value) {
  _internal_set_currentscore(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.currentScore)
}
inline ::int32_t BallUpdate::_internal_currentscore() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currentscore_;
}
inline void BallUpdate::_internal_set_currentscore(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currentscore_ = value;
}

// int32 wicketsLeft = 4;
inline void BallUpdate::clear_wicketsleft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wicketsleft_ = 0;
}
inline ::int32_t BallUpdate::wicketsleft() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.wicketsLeft)
  return _internal_wicketsleft();
}
inline void BallUpdate::set_wicketsleft(::int32_t value) {
  _internal_set_wicketsleft(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.wicketsLeft)
}
inline ::int32_t BallUpdate::_internal_wicketsleft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wicketsleft_;
}
inline void BallUpdate::_internal_set_wicketsleft(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wicketsleft_ = value;
}

// int32 ballsRemaining = 5;
inline void BallUpdate::clear_ballsremaining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ballsremaining_ = 0;
}
inline ::int32_t BallUpdate::ballsremaining() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.ballsRemaining)
  return _internal_ballsremaining();
}
inline void BallUpdate::set_ballsremaining(::int32_t value) {
  _internal_set_ballsremaining(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.ballsRemaining)
}
inline ::int32_t BallUpdate::_internal_ballsremaining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ballsremaining_;
}
inline void BallUpdate::_internal_set_ballsremaining(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ballsremaining_ = value;
}

// repeated int32 recentRuns = 6;
inline int BallUpdate::_internal_recentruns_size() const {
  return _internal_recentruns().size();
}
inline int BallUpdate::recentruns_size() const {
  return _internal_recentruns_size();
}
inline void BallUpdate::clear_recentruns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recentruns_.Clear();
}
inline ::int32_t BallUpdate::recentruns(int index) const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.recentRuns)
  return _internal_recentruns().Get(index);
}
inline void BallUpdate::set_recentruns(int index, ::int32_t value) {
  _internal_mutable_recentruns()->Set(index, value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.recentRuns)
}
inline void BallUpdate::add_recentruns(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_recentruns()->Add(value);
  // @@protoc_insertion_point(field_add:odds.BallUpdate.recentRuns)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BallUpdate::recentruns() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:odds.BallUpdate.recentRuns)
  return _internal_recentruns();
}
inline ::google::protobuf::RepeatedField<::int32_t>* BallUpdate::mutable_recentruns()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:odds.BallUpdate.recentRuns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_recentruns();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
BallUpdate::_internal_recentruns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recentruns_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* BallUpdate::_internal_mutable_recentruns() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.recentruns_;
}

// map<string, double> bowlerImpact = 7;
inline int BallUpdate::_internal_bowlerimpact_size() const {
  return _internal_bowlerimpact().size();
}
inline int BallUpdate::bowlerimpact_size() const {
  return _internal_bowlerimpact_size();
}
inline void BallUpdate::clear_bowlerimpact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bowlerimpact_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& BallUpdate::_internal_bowlerimpact() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bowlerimpact_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& BallUpdate::bowlerimpact() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:odds.BallUpdate.bowlerImpact)
  return _internal_bowlerimpact();
}
inline ::google::protobuf::Map<std::string, double>* BallUpdate::_internal_mutable_bowlerimpact() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bowlerimpact_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* BallUpdate::mutable_bowlerimpact() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:odds.BallUpdate.bowlerImpact)
  return _internal_mutable_bowlerimpact();
}

// double pitchModifier = 8;
inline void BallUpdate::clear_pitchmodifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitchmodifier_ = 0;
}
inline double BallUpdate::pitchmodifier() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.pitchModifier)
  return _internal_pitchmodifier();
}
inline void BallUpdate::set_pitchmodifier(double value) {
  _internal_set_pitchmodifier(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.pitchModifier)
}
inline double BallUpdate::_internal_pitchmodifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitchmodifier_;
}
inline void BallUpdate::_internal_set_pitchmodifier(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitchmodifier_ = value;
}

// -------------------------------------------------------------------

// OddsResponse

// double winProbability = 1;
inline void OddsResponse::clear_winprobability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winprobability_ = 0;
}
inline double OddsResponse::winprobability() const {
  // @@protoc_insertion_point(field_get:odds.OddsResponse.winProbability)
  return _internal_winprobability();
}
inline void OddsResponse::set_winprobability(double value) {
  _internal_set_winprobability(value);
  // @@protoc_insertion_point(field_set:odds.OddsResponse.winProbability)
}
inline double OddsResponse::_internal_winprobability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.winprobability_;
}
inline void OddsResponse::_internal_set_winprobability(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winprobability_ = value;
}

// -------------------------------------------------------------------

// Bet

// string userId = 1;
inline void Bet::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& Bet::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.Bet.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bet::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.Bet.userId)
}
inline std::string* Bet::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:odds.Bet.userId)
  return _s;
}
inline const std::string& Bet::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void Bet::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* Bet::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* Bet::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.Bet.userId)
  return _impl_.userid_.Release();
}
inline void Bet::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.Bet.userId)
}

// double stake = 2;
inline void Bet::clear_stake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_ = 0;
}
inline double Bet::stake() const {
  // @@protoc_insertion_point(field_get:odds.Bet.stake)
  return _internal_stake();
}
inline void Bet::set_stake(double value) {
  _internal_set_stake(value);
  // @@protoc_insertion_point(field_set:odds.Bet.stake)
}
inline double Bet::_internal_stake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stake_;
}
inline void Bet::_internal_set_stake(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_ = value;
}

// double odds = 3;
inline void Bet::clear_odds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odds_ = 0;
}
inline double Bet::odds() const {
  // @@protoc_insertion_point(field_get:odds.Bet.odds)
  return _internal_odds();
}
inline void Bet::set_odds(double value) {
  _internal_set_odds(value);
  // @@protoc_insertion_point(field_set:odds.Bet.odds)
}
inline double Bet::_internal_odds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.odds_;
}
inline void Bet::_internal_set_odds(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odds_ = value;
}

// string market = 4;
inline void Bet::clear_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.ClearToEmpty();
}
inline const std::string& Bet::market() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.Bet.market)
  return _internal_market();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bet::set_market(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.Bet.market)
}
inline std::string* Bet::mutable_market() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_market();
  // @@protoc_insertion_point(field_mutable:odds.Bet.market)
  return _s;
}
inline const std::string& Bet::_internal_market() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.market_.Get();
}
inline void Bet::_internal_set_market(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(value, GetArena());
}
inline std::string* Bet::_internal_mutable_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.market_.Mutable( GetArena());
}
inline std::string* Bet::release_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.Bet.market)
  return _impl_.market_.Release();
}
inline void Bet::set_allocated_market(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.market_.IsDefault()) {
    _impl_.market_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.Bet.market)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace odds


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // odds_5fengine_2eproto_2epb_2eh
