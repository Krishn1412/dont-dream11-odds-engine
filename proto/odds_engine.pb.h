// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: odds_engine.proto
// Protobuf C++ Version: 5.29.3

#ifndef odds_5fengine_2eproto_2epb_2eh
#define odds_5fengine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_odds_5fengine_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_odds_5fengine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_odds_5fengine_2eproto;
namespace odds {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class BallUpdate;
struct BallUpdateDefaultTypeInternal;
extern BallUpdateDefaultTypeInternal _BallUpdate_default_instance_;
class Bet;
struct BetDefaultTypeInternal;
extern BetDefaultTypeInternal _Bet_default_instance_;
class BetRequest;
struct BetRequestDefaultTypeInternal;
extern BetRequestDefaultTypeInternal _BetRequest_default_instance_;
class MatchStateRequest;
struct MatchStateRequestDefaultTypeInternal;
extern MatchStateRequestDefaultTypeInternal _MatchStateRequest_default_instance_;
class OddsQueryRequest;
struct OddsQueryRequestDefaultTypeInternal;
extern OddsQueryRequestDefaultTypeInternal _OddsQueryRequest_default_instance_;
class OddsResponse;
struct OddsResponseDefaultTypeInternal;
extern OddsResponseDefaultTypeInternal _OddsResponse_default_instance_;
class SetInitialOddsRequest;
struct SetInitialOddsRequestDefaultTypeInternal;
extern SetInitialOddsRequestDefaultTypeInternal _SetInitialOddsRequest_default_instance_;
}  // namespace odds
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace odds {

// ===================================================================


// -------------------------------------------------------------------

class SetInitialOddsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.SetInitialOddsRequest) */ {
 public:
  inline SetInitialOddsRequest() : SetInitialOddsRequest(nullptr) {}
  ~SetInitialOddsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetInitialOddsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetInitialOddsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetInitialOddsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetInitialOddsRequest(const SetInitialOddsRequest& from) : SetInitialOddsRequest(nullptr, from) {}
  inline SetInitialOddsRequest(SetInitialOddsRequest&& from) noexcept
      : SetInitialOddsRequest(nullptr, std::move(from)) {}
  inline SetInitialOddsRequest& operator=(const SetInitialOddsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInitialOddsRequest& operator=(SetInitialOddsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInitialOddsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInitialOddsRequest* internal_default_instance() {
    return reinterpret_cast<const SetInitialOddsRequest*>(
        &_SetInitialOddsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SetInitialOddsRequest& a, SetInitialOddsRequest& b) { a.Swap(&b); }
  inline void Swap(SetInitialOddsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInitialOddsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInitialOddsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetInitialOddsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInitialOddsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetInitialOddsRequest& from) { SetInitialOddsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetInitialOddsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.SetInitialOddsRequest"; }

 protected:
  explicit SetInitialOddsRequest(::google::protobuf::Arena* arena);
  SetInitialOddsRequest(::google::protobuf::Arena* arena, const SetInitialOddsRequest& from);
  SetInitialOddsRequest(::google::protobuf::Arena* arena, SetInitialOddsRequest&& from) noexcept
      : SetInitialOddsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGameIdFieldNumber = 1,
    kMarketFieldNumber = 2,
    kInitialProbabilityFieldNumber = 3,
  };
  // string game_id = 1;
  void clear_game_id() ;
  const std::string& game_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_id(Arg_&& arg, Args_... args);
  std::string* mutable_game_id();
  PROTOBUF_NODISCARD std::string* release_game_id();
  void set_allocated_game_id(std::string* value);

  private:
  const std::string& _internal_game_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_id(
      const std::string& value);
  std::string* _internal_mutable_game_id();

  public:
  // string market = 2;
  void clear_market() ;
  const std::string& market() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market(Arg_&& arg, Args_... args);
  std::string* mutable_market();
  PROTOBUF_NODISCARD std::string* release_market();
  void set_allocated_market(std::string* value);

  private:
  const std::string& _internal_market() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market(
      const std::string& value);
  std::string* _internal_mutable_market();

  public:
  // double initialProbability = 3;
  void clear_initialprobability() ;
  double initialprobability() const;
  void set_initialprobability(double value);

  private:
  double _internal_initialprobability() const;
  void _internal_set_initialprobability(double value);

  public:
  // @@protoc_insertion_point(class_scope:odds.SetInitialOddsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetInitialOddsRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr game_id_;
    ::google::protobuf::internal::ArenaStringPtr market_;
    double initialprobability_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class OddsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.OddsResponse) */ {
 public:
  inline OddsResponse() : OddsResponse(nullptr) {}
  ~OddsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OddsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OddsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OddsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline OddsResponse(const OddsResponse& from) : OddsResponse(nullptr, from) {}
  inline OddsResponse(OddsResponse&& from) noexcept
      : OddsResponse(nullptr, std::move(from)) {}
  inline OddsResponse& operator=(const OddsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OddsResponse& operator=(OddsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OddsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OddsResponse* internal_default_instance() {
    return reinterpret_cast<const OddsResponse*>(
        &_OddsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(OddsResponse& a, OddsResponse& b) { a.Swap(&b); }
  inline void Swap(OddsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OddsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OddsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OddsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OddsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OddsResponse& from) { OddsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OddsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.OddsResponse"; }

 protected:
  explicit OddsResponse(::google::protobuf::Arena* arena);
  OddsResponse(::google::protobuf::Arena* arena, const OddsResponse& from);
  OddsResponse(::google::protobuf::Arena* arena, OddsResponse&& from) noexcept
      : OddsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWinProbabilityFieldNumber = 1,
  };
  // double winProbability = 1;
  void clear_winprobability() ;
  double winprobability() const;
  void set_winprobability(double value);

  private:
  double _internal_winprobability() const;
  void _internal_set_winprobability(double value);

  public:
  // @@protoc_insertion_point(class_scope:odds.OddsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OddsResponse& from_msg);
    double winprobability_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class OddsQueryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.OddsQueryRequest) */ {
 public:
  inline OddsQueryRequest() : OddsQueryRequest(nullptr) {}
  ~OddsQueryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OddsQueryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OddsQueryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OddsQueryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OddsQueryRequest(const OddsQueryRequest& from) : OddsQueryRequest(nullptr, from) {}
  inline OddsQueryRequest(OddsQueryRequest&& from) noexcept
      : OddsQueryRequest(nullptr, std::move(from)) {}
  inline OddsQueryRequest& operator=(const OddsQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OddsQueryRequest& operator=(OddsQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OddsQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OddsQueryRequest* internal_default_instance() {
    return reinterpret_cast<const OddsQueryRequest*>(
        &_OddsQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(OddsQueryRequest& a, OddsQueryRequest& b) { a.Swap(&b); }
  inline void Swap(OddsQueryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OddsQueryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OddsQueryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OddsQueryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OddsQueryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OddsQueryRequest& from) { OddsQueryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OddsQueryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.OddsQueryRequest"; }

 protected:
  explicit OddsQueryRequest(::google::protobuf::Arena* arena);
  OddsQueryRequest(::google::protobuf::Arena* arena, const OddsQueryRequest& from);
  OddsQueryRequest(::google::protobuf::Arena* arena, OddsQueryRequest&& from) noexcept
      : OddsQueryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGameIdFieldNumber = 1,
    kMarketFieldNumber = 2,
  };
  // string gameId = 1;
  void clear_gameid() ;
  const std::string& gameid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gameid(Arg_&& arg, Args_... args);
  std::string* mutable_gameid();
  PROTOBUF_NODISCARD std::string* release_gameid();
  void set_allocated_gameid(std::string* value);

  private:
  const std::string& _internal_gameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gameid(
      const std::string& value);
  std::string* _internal_mutable_gameid();

  public:
  // string market = 2;
  void clear_market() ;
  const std::string& market() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market(Arg_&& arg, Args_... args);
  std::string* mutable_market();
  PROTOBUF_NODISCARD std::string* release_market();
  void set_allocated_market(std::string* value);

  private:
  const std::string& _internal_market() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market(
      const std::string& value);
  std::string* _internal_mutable_market();

  public:
  // @@protoc_insertion_point(class_scope:odds.OddsQueryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OddsQueryRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr gameid_;
    ::google::protobuf::internal::ArenaStringPtr market_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Bet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.Bet) */ {
 public:
  inline Bet() : Bet(nullptr) {}
  ~Bet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Bet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Bet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Bet(
      ::google::protobuf::internal::ConstantInitialized);

  inline Bet(const Bet& from) : Bet(nullptr, from) {}
  inline Bet(Bet&& from) noexcept
      : Bet(nullptr, std::move(from)) {}
  inline Bet& operator=(const Bet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bet& operator=(Bet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bet* internal_default_instance() {
    return reinterpret_cast<const Bet*>(
        &_Bet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Bet& a, Bet& b) { a.Swap(&b); }
  inline void Swap(Bet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Bet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Bet& from) { Bet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Bet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.Bet"; }

 protected:
  explicit Bet(::google::protobuf::Arena* arena);
  Bet(::google::protobuf::Arena* arena, const Bet& from);
  Bet(::google::protobuf::Arena* arena, Bet&& from) noexcept
      : Bet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kMarketFieldNumber = 4,
    kStakeFieldNumber = 2,
    kOddsFieldNumber = 3,
    kTeamAFieldNumber = 5,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string market = 4;
  void clear_market() ;
  const std::string& market() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market(Arg_&& arg, Args_... args);
  std::string* mutable_market();
  PROTOBUF_NODISCARD std::string* release_market();
  void set_allocated_market(std::string* value);

  private:
  const std::string& _internal_market() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market(
      const std::string& value);
  std::string* _internal_mutable_market();

  public:
  // double stake = 2;
  void clear_stake() ;
  double stake() const;
  void set_stake(double value);

  private:
  double _internal_stake() const;
  void _internal_set_stake(double value);

  public:
  // double odds = 3;
  void clear_odds() ;
  double odds() const;
  void set_odds(double value);

  private:
  double _internal_odds() const;
  void _internal_set_odds(double value);

  public:
  // bool teamA = 5;
  void clear_teama() ;
  bool teama() const;
  void set_teama(bool value);

  private:
  bool _internal_teama() const;
  void _internal_set_teama(bool value);

  public:
  // @@protoc_insertion_point(class_scope:odds.Bet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Bet& from_msg);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr market_;
    double stake_;
    double odds_;
    bool teama_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class BallUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.BallUpdate) */ {
 public:
  inline BallUpdate() : BallUpdate(nullptr) {}
  ~BallUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BallUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BallUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BallUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline BallUpdate(const BallUpdate& from) : BallUpdate(nullptr, from) {}
  inline BallUpdate(BallUpdate&& from) noexcept
      : BallUpdate(nullptr, std::move(from)) {}
  inline BallUpdate& operator=(const BallUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallUpdate& operator=(BallUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BallUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const BallUpdate* internal_default_instance() {
    return reinterpret_cast<const BallUpdate*>(
        &_BallUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(BallUpdate& a, BallUpdate& b) { a.Swap(&b); }
  inline void Swap(BallUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BallUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BallUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BallUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BallUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BallUpdate& from) { BallUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BallUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.BallUpdate"; }

 protected:
  explicit BallUpdate(::google::protobuf::Arena* arena);
  BallUpdate(::google::protobuf::Arena* arena, const BallUpdate& from);
  BallUpdate(::google::protobuf::Arena* arena, BallUpdate&& from) noexcept
      : BallUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecentRunsFieldNumber = 6,
    kStrikerFieldNumber = 7,
    kNonStrikerFieldNumber = 8,
    kBowlerFieldNumber = 14,
    kInningsFieldNumber = 1,
    kTargetScoreFieldNumber = 2,
    kCurrentScoreFieldNumber = 3,
    kWicketsLeftFieldNumber = 4,
    kPitchModifierFieldNumber = 9,
    kBallsRemainingFieldNumber = 5,
    kIsWicketFieldNumber = 10,
    kIsDotFieldNumber = 11,
    kIsExtraFieldNumber = 12,
    kIsBoundaryFieldNumber = 13,
    kRunsFieldNumber = 15,
  };
  // repeated int32 recentRuns = 6;
  int recentruns_size() const;
  private:
  int _internal_recentruns_size() const;

  public:
  void clear_recentruns() ;
  ::int32_t recentruns(int index) const;
  void set_recentruns(int index, ::int32_t value);
  void add_recentruns(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& recentruns() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_recentruns();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_recentruns() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_recentruns();

  public:
  // string striker = 7;
  void clear_striker() ;
  const std::string& striker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_striker(Arg_&& arg, Args_... args);
  std::string* mutable_striker();
  PROTOBUF_NODISCARD std::string* release_striker();
  void set_allocated_striker(std::string* value);

  private:
  const std::string& _internal_striker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_striker(
      const std::string& value);
  std::string* _internal_mutable_striker();

  public:
  // string nonStriker = 8;
  void clear_nonstriker() ;
  const std::string& nonstriker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonstriker(Arg_&& arg, Args_... args);
  std::string* mutable_nonstriker();
  PROTOBUF_NODISCARD std::string* release_nonstriker();
  void set_allocated_nonstriker(std::string* value);

  private:
  const std::string& _internal_nonstriker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonstriker(
      const std::string& value);
  std::string* _internal_mutable_nonstriker();

  public:
  // string bowler = 14;
  void clear_bowler() ;
  const std::string& bowler() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bowler(Arg_&& arg, Args_... args);
  std::string* mutable_bowler();
  PROTOBUF_NODISCARD std::string* release_bowler();
  void set_allocated_bowler(std::string* value);

  private:
  const std::string& _internal_bowler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bowler(
      const std::string& value);
  std::string* _internal_mutable_bowler();

  public:
  // int32 innings = 1;
  void clear_innings() ;
  ::int32_t innings() const;
  void set_innings(::int32_t value);

  private:
  ::int32_t _internal_innings() const;
  void _internal_set_innings(::int32_t value);

  public:
  // int32 targetScore = 2;
  void clear_targetscore() ;
  ::int32_t targetscore() const;
  void set_targetscore(::int32_t value);

  private:
  ::int32_t _internal_targetscore() const;
  void _internal_set_targetscore(::int32_t value);

  public:
  // int32 currentScore = 3;
  void clear_currentscore() ;
  ::int32_t currentscore() const;
  void set_currentscore(::int32_t value);

  private:
  ::int32_t _internal_currentscore() const;
  void _internal_set_currentscore(::int32_t value);

  public:
  // int32 wicketsLeft = 4;
  void clear_wicketsleft() ;
  ::int32_t wicketsleft() const;
  void set_wicketsleft(::int32_t value);

  private:
  ::int32_t _internal_wicketsleft() const;
  void _internal_set_wicketsleft(::int32_t value);

  public:
  // double pitchModifier = 9;
  void clear_pitchmodifier() ;
  double pitchmodifier() const;
  void set_pitchmodifier(double value);

  private:
  double _internal_pitchmodifier() const;
  void _internal_set_pitchmodifier(double value);

  public:
  // int32 ballsRemaining = 5;
  void clear_ballsremaining() ;
  ::int32_t ballsremaining() const;
  void set_ballsremaining(::int32_t value);

  private:
  ::int32_t _internal_ballsremaining() const;
  void _internal_set_ballsremaining(::int32_t value);

  public:
  // bool isWicket = 10;
  void clear_iswicket() ;
  bool iswicket() const;
  void set_iswicket(bool value);

  private:
  bool _internal_iswicket() const;
  void _internal_set_iswicket(bool value);

  public:
  // bool isDot = 11;
  void clear_isdot() ;
  bool isdot() const;
  void set_isdot(bool value);

  private:
  bool _internal_isdot() const;
  void _internal_set_isdot(bool value);

  public:
  // bool isExtra = 12;
  void clear_isextra() ;
  bool isextra() const;
  void set_isextra(bool value);

  private:
  bool _internal_isextra() const;
  void _internal_set_isextra(bool value);

  public:
  // bool isBoundary = 13;
  void clear_isboundary() ;
  bool isboundary() const;
  void set_isboundary(bool value);

  private:
  bool _internal_isboundary() const;
  void _internal_set_isboundary(bool value);

  public:
  // int32 runs = 15;
  void clear_runs() ;
  ::int32_t runs() const;
  void set_runs(::int32_t value);

  private:
  ::int32_t _internal_runs() const;
  void _internal_set_runs(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:odds.BallUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BallUpdate& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> recentruns_;
    ::google::protobuf::internal::CachedSize _recentruns_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr striker_;
    ::google::protobuf::internal::ArenaStringPtr nonstriker_;
    ::google::protobuf::internal::ArenaStringPtr bowler_;
    ::int32_t innings_;
    ::int32_t targetscore_;
    ::int32_t currentscore_;
    ::int32_t wicketsleft_;
    double pitchmodifier_;
    ::int32_t ballsremaining_;
    bool iswicket_;
    bool isdot_;
    bool isextra_;
    bool isboundary_;
    ::int32_t runs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class Ack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ack(
      ::google::protobuf::internal::ConstantInitialized);

  inline Ack(const Ack& from) : Ack(nullptr, from) {}
  inline Ack(Ack&& from) noexcept
      : Ack(nullptr, std::move(from)) {}
  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
        &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Ack& a, Ack& b) { a.Swap(&b); }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Ack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ack& from) { Ack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Ack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.Ack"; }

 protected:
  explicit Ack(::google::protobuf::Arena* arena);
  Ack(::google::protobuf::Arena* arena, const Ack& from);
  Ack(::google::protobuf::Arena* arena, Ack&& from) noexcept
      : Ack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:odds.Ack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      24, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Ack& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class MatchStateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.MatchStateRequest) */ {
 public:
  inline MatchStateRequest() : MatchStateRequest(nullptr) {}
  ~MatchStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MatchStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MatchStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MatchStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MatchStateRequest(const MatchStateRequest& from) : MatchStateRequest(nullptr, from) {}
  inline MatchStateRequest(MatchStateRequest&& from) noexcept
      : MatchStateRequest(nullptr, std::move(from)) {}
  inline MatchStateRequest& operator=(const MatchStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchStateRequest& operator=(MatchStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchStateRequest* internal_default_instance() {
    return reinterpret_cast<const MatchStateRequest*>(
        &_MatchStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MatchStateRequest& a, MatchStateRequest& b) { a.Swap(&b); }
  inline void Swap(MatchStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MatchStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MatchStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MatchStateRequest& from) { MatchStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MatchStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.MatchStateRequest"; }

 protected:
  explicit MatchStateRequest(::google::protobuf::Arena* arena);
  MatchStateRequest(::google::protobuf::Arena* arena, const MatchStateRequest& from);
  MatchStateRequest(::google::protobuf::Arena* arena, MatchStateRequest&& from) noexcept
      : MatchStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGameIdFieldNumber = 1,
    kUpdateFieldNumber = 2,
  };
  // string gameId = 1;
  void clear_gameid() ;
  const std::string& gameid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gameid(Arg_&& arg, Args_... args);
  std::string* mutable_gameid();
  PROTOBUF_NODISCARD std::string* release_gameid();
  void set_allocated_gameid(std::string* value);

  private:
  const std::string& _internal_gameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gameid(
      const std::string& value);
  std::string* _internal_mutable_gameid();

  public:
  // .odds.BallUpdate update = 2;
  bool has_update() const;
  void clear_update() ;
  const ::odds::BallUpdate& update() const;
  PROTOBUF_NODISCARD ::odds::BallUpdate* release_update();
  ::odds::BallUpdate* mutable_update();
  void set_allocated_update(::odds::BallUpdate* value);
  void unsafe_arena_set_allocated_update(::odds::BallUpdate* value);
  ::odds::BallUpdate* unsafe_arena_release_update();

  private:
  const ::odds::BallUpdate& _internal_update() const;
  ::odds::BallUpdate* _internal_mutable_update();

  public:
  // @@protoc_insertion_point(class_scope:odds.MatchStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MatchStateRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gameid_;
    ::odds::BallUpdate* update_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};
// -------------------------------------------------------------------

class BetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:odds.BetRequest) */ {
 public:
  inline BetRequest() : BetRequest(nullptr) {}
  ~BetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BetRequest(const BetRequest& from) : BetRequest(nullptr, from) {}
  inline BetRequest(BetRequest&& from) noexcept
      : BetRequest(nullptr, std::move(from)) {}
  inline BetRequest& operator=(const BetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BetRequest& operator=(BetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BetRequest* internal_default_instance() {
    return reinterpret_cast<const BetRequest*>(
        &_BetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(BetRequest& a, BetRequest& b) { a.Swap(&b); }
  inline void Swap(BetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BetRequest& from) { BetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BetRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "odds.BetRequest"; }

 protected:
  explicit BetRequest(::google::protobuf::Arena* arena);
  BetRequest(::google::protobuf::Arena* arena, const BetRequest& from);
  BetRequest(::google::protobuf::Arena* arena, BetRequest&& from) noexcept
      : BetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGameIdFieldNumber = 1,
    kBetFieldNumber = 2,
  };
  // string gameId = 1;
  void clear_gameid() ;
  const std::string& gameid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gameid(Arg_&& arg, Args_... args);
  std::string* mutable_gameid();
  PROTOBUF_NODISCARD std::string* release_gameid();
  void set_allocated_gameid(std::string* value);

  private:
  const std::string& _internal_gameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gameid(
      const std::string& value);
  std::string* _internal_mutable_gameid();

  public:
  // .odds.Bet bet = 2;
  bool has_bet() const;
  void clear_bet() ;
  const ::odds::Bet& bet() const;
  PROTOBUF_NODISCARD ::odds::Bet* release_bet();
  ::odds::Bet* mutable_bet();
  void set_allocated_bet(::odds::Bet* value);
  void unsafe_arena_set_allocated_bet(::odds::Bet* value);
  ::odds::Bet* unsafe_arena_release_bet();

  private:
  const ::odds::Bet& _internal_bet() const;
  ::odds::Bet* _internal_mutable_bet();

  public:
  // @@protoc_insertion_point(class_scope:odds.BetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BetRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr gameid_;
    ::odds::Bet* bet_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_odds_5fengine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetInitialOddsRequest

// string game_id = 1;
inline void SetInitialOddsRequest::clear_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.ClearToEmpty();
}
inline const std::string& SetInitialOddsRequest::game_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.SetInitialOddsRequest.game_id)
  return _internal_game_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetInitialOddsRequest::set_game_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.SetInitialOddsRequest.game_id)
}
inline std::string* SetInitialOddsRequest::mutable_game_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_id();
  // @@protoc_insertion_point(field_mutable:odds.SetInitialOddsRequest.game_id)
  return _s;
}
inline const std::string& SetInitialOddsRequest::_internal_game_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_id_.Get();
}
inline void SetInitialOddsRequest::_internal_set_game_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(value, GetArena());
}
inline std::string* SetInitialOddsRequest::_internal_mutable_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_id_.Mutable( GetArena());
}
inline std::string* SetInitialOddsRequest::release_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.SetInitialOddsRequest.game_id)
  return _impl_.game_id_.Release();
}
inline void SetInitialOddsRequest::set_allocated_game_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_id_.IsDefault()) {
    _impl_.game_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.SetInitialOddsRequest.game_id)
}

// string market = 2;
inline void SetInitialOddsRequest::clear_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.ClearToEmpty();
}
inline const std::string& SetInitialOddsRequest::market() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.SetInitialOddsRequest.market)
  return _internal_market();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetInitialOddsRequest::set_market(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.SetInitialOddsRequest.market)
}
inline std::string* SetInitialOddsRequest::mutable_market() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_market();
  // @@protoc_insertion_point(field_mutable:odds.SetInitialOddsRequest.market)
  return _s;
}
inline const std::string& SetInitialOddsRequest::_internal_market() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.market_.Get();
}
inline void SetInitialOddsRequest::_internal_set_market(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(value, GetArena());
}
inline std::string* SetInitialOddsRequest::_internal_mutable_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.market_.Mutable( GetArena());
}
inline std::string* SetInitialOddsRequest::release_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.SetInitialOddsRequest.market)
  return _impl_.market_.Release();
}
inline void SetInitialOddsRequest::set_allocated_market(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.market_.IsDefault()) {
    _impl_.market_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.SetInitialOddsRequest.market)
}

// double initialProbability = 3;
inline void SetInitialOddsRequest::clear_initialprobability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initialprobability_ = 0;
}
inline double SetInitialOddsRequest::initialprobability() const {
  // @@protoc_insertion_point(field_get:odds.SetInitialOddsRequest.initialProbability)
  return _internal_initialprobability();
}
inline void SetInitialOddsRequest::set_initialprobability(double value) {
  _internal_set_initialprobability(value);
  // @@protoc_insertion_point(field_set:odds.SetInitialOddsRequest.initialProbability)
}
inline double SetInitialOddsRequest::_internal_initialprobability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initialprobability_;
}
inline void SetInitialOddsRequest::_internal_set_initialprobability(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initialprobability_ = value;
}

// -------------------------------------------------------------------

// Ack

// bool success = 1;
inline void Ack::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool Ack::success() const {
  // @@protoc_insertion_point(field_get:odds.Ack.success)
  return _internal_success();
}
inline void Ack::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:odds.Ack.success)
}
inline bool Ack::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void Ack::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void Ack::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Ack::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.Ack.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ack::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.Ack.message)
}
inline std::string* Ack::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:odds.Ack.message)
  return _s;
}
inline const std::string& Ack::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Ack::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Ack::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Ack::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.Ack.message)
  return _impl_.message_.Release();
}
inline void Ack::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.Ack.message)
}

// -------------------------------------------------------------------

// BallUpdate

// int32 innings = 1;
inline void BallUpdate::clear_innings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.innings_ = 0;
}
inline ::int32_t BallUpdate::innings() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.innings)
  return _internal_innings();
}
inline void BallUpdate::set_innings(::int32_t value) {
  _internal_set_innings(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.innings)
}
inline ::int32_t BallUpdate::_internal_innings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.innings_;
}
inline void BallUpdate::_internal_set_innings(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.innings_ = value;
}

// int32 targetScore = 2;
inline void BallUpdate::clear_targetscore() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetscore_ = 0;
}
inline ::int32_t BallUpdate::targetscore() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.targetScore)
  return _internal_targetscore();
}
inline void BallUpdate::set_targetscore(::int32_t value) {
  _internal_set_targetscore(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.targetScore)
}
inline ::int32_t BallUpdate::_internal_targetscore() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.targetscore_;
}
inline void BallUpdate::_internal_set_targetscore(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.targetscore_ = value;
}

// int32 currentScore = 3;
inline void BallUpdate::clear_currentscore() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currentscore_ = 0;
}
inline ::int32_t BallUpdate::currentscore() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.currentScore)
  return _internal_currentscore();
}
inline void BallUpdate::set_currentscore(::int32_t value) {
  _internal_set_currentscore(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.currentScore)
}
inline ::int32_t BallUpdate::_internal_currentscore() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.currentscore_;
}
inline void BallUpdate::_internal_set_currentscore(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.currentscore_ = value;
}

// int32 wicketsLeft = 4;
inline void BallUpdate::clear_wicketsleft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wicketsleft_ = 0;
}
inline ::int32_t BallUpdate::wicketsleft() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.wicketsLeft)
  return _internal_wicketsleft();
}
inline void BallUpdate::set_wicketsleft(::int32_t value) {
  _internal_set_wicketsleft(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.wicketsLeft)
}
inline ::int32_t BallUpdate::_internal_wicketsleft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wicketsleft_;
}
inline void BallUpdate::_internal_set_wicketsleft(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wicketsleft_ = value;
}

// int32 ballsRemaining = 5;
inline void BallUpdate::clear_ballsremaining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ballsremaining_ = 0;
}
inline ::int32_t BallUpdate::ballsremaining() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.ballsRemaining)
  return _internal_ballsremaining();
}
inline void BallUpdate::set_ballsremaining(::int32_t value) {
  _internal_set_ballsremaining(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.ballsRemaining)
}
inline ::int32_t BallUpdate::_internal_ballsremaining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ballsremaining_;
}
inline void BallUpdate::_internal_set_ballsremaining(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ballsremaining_ = value;
}

// repeated int32 recentRuns = 6;
inline int BallUpdate::_internal_recentruns_size() const {
  return _internal_recentruns().size();
}
inline int BallUpdate::recentruns_size() const {
  return _internal_recentruns_size();
}
inline void BallUpdate::clear_recentruns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recentruns_.Clear();
}
inline ::int32_t BallUpdate::recentruns(int index) const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.recentRuns)
  return _internal_recentruns().Get(index);
}
inline void BallUpdate::set_recentruns(int index, ::int32_t value) {
  _internal_mutable_recentruns()->Set(index, value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.recentRuns)
}
inline void BallUpdate::add_recentruns(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_recentruns()->Add(value);
  // @@protoc_insertion_point(field_add:odds.BallUpdate.recentRuns)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BallUpdate::recentruns() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:odds.BallUpdate.recentRuns)
  return _internal_recentruns();
}
inline ::google::protobuf::RepeatedField<::int32_t>* BallUpdate::mutable_recentruns()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:odds.BallUpdate.recentRuns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_recentruns();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
BallUpdate::_internal_recentruns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recentruns_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* BallUpdate::_internal_mutable_recentruns() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.recentruns_;
}

// string striker = 7;
inline void BallUpdate::clear_striker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.striker_.ClearToEmpty();
}
inline const std::string& BallUpdate::striker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.striker)
  return _internal_striker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BallUpdate::set_striker(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.striker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.BallUpdate.striker)
}
inline std::string* BallUpdate::mutable_striker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_striker();
  // @@protoc_insertion_point(field_mutable:odds.BallUpdate.striker)
  return _s;
}
inline const std::string& BallUpdate::_internal_striker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.striker_.Get();
}
inline void BallUpdate::_internal_set_striker(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.striker_.Set(value, GetArena());
}
inline std::string* BallUpdate::_internal_mutable_striker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.striker_.Mutable( GetArena());
}
inline std::string* BallUpdate::release_striker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.BallUpdate.striker)
  return _impl_.striker_.Release();
}
inline void BallUpdate::set_allocated_striker(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.striker_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.striker_.IsDefault()) {
    _impl_.striker_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.BallUpdate.striker)
}

// string nonStriker = 8;
inline void BallUpdate::clear_nonstriker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonstriker_.ClearToEmpty();
}
inline const std::string& BallUpdate::nonstriker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.nonStriker)
  return _internal_nonstriker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BallUpdate::set_nonstriker(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonstriker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.BallUpdate.nonStriker)
}
inline std::string* BallUpdate::mutable_nonstriker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonstriker();
  // @@protoc_insertion_point(field_mutable:odds.BallUpdate.nonStriker)
  return _s;
}
inline const std::string& BallUpdate::_internal_nonstriker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonstriker_.Get();
}
inline void BallUpdate::_internal_set_nonstriker(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonstriker_.Set(value, GetArena());
}
inline std::string* BallUpdate::_internal_mutable_nonstriker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nonstriker_.Mutable( GetArena());
}
inline std::string* BallUpdate::release_nonstriker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.BallUpdate.nonStriker)
  return _impl_.nonstriker_.Release();
}
inline void BallUpdate::set_allocated_nonstriker(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonstriker_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nonstriker_.IsDefault()) {
    _impl_.nonstriker_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.BallUpdate.nonStriker)
}

// double pitchModifier = 9;
inline void BallUpdate::clear_pitchmodifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitchmodifier_ = 0;
}
inline double BallUpdate::pitchmodifier() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.pitchModifier)
  return _internal_pitchmodifier();
}
inline void BallUpdate::set_pitchmodifier(double value) {
  _internal_set_pitchmodifier(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.pitchModifier)
}
inline double BallUpdate::_internal_pitchmodifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitchmodifier_;
}
inline void BallUpdate::_internal_set_pitchmodifier(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitchmodifier_ = value;
}

// bool isWicket = 10;
inline void BallUpdate::clear_iswicket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iswicket_ = false;
}
inline bool BallUpdate::iswicket() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.isWicket)
  return _internal_iswicket();
}
inline void BallUpdate::set_iswicket(bool value) {
  _internal_set_iswicket(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.isWicket)
}
inline bool BallUpdate::_internal_iswicket() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iswicket_;
}
inline void BallUpdate::_internal_set_iswicket(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iswicket_ = value;
}

// bool isDot = 11;
inline void BallUpdate::clear_isdot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isdot_ = false;
}
inline bool BallUpdate::isdot() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.isDot)
  return _internal_isdot();
}
inline void BallUpdate::set_isdot(bool value) {
  _internal_set_isdot(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.isDot)
}
inline bool BallUpdate::_internal_isdot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isdot_;
}
inline void BallUpdate::_internal_set_isdot(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isdot_ = value;
}

// bool isExtra = 12;
inline void BallUpdate::clear_isextra() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isextra_ = false;
}
inline bool BallUpdate::isextra() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.isExtra)
  return _internal_isextra();
}
inline void BallUpdate::set_isextra(bool value) {
  _internal_set_isextra(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.isExtra)
}
inline bool BallUpdate::_internal_isextra() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isextra_;
}
inline void BallUpdate::_internal_set_isextra(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isextra_ = value;
}

// bool isBoundary = 13;
inline void BallUpdate::clear_isboundary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isboundary_ = false;
}
inline bool BallUpdate::isboundary() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.isBoundary)
  return _internal_isboundary();
}
inline void BallUpdate::set_isboundary(bool value) {
  _internal_set_isboundary(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.isBoundary)
}
inline bool BallUpdate::_internal_isboundary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isboundary_;
}
inline void BallUpdate::_internal_set_isboundary(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isboundary_ = value;
}

// string bowler = 14;
inline void BallUpdate::clear_bowler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bowler_.ClearToEmpty();
}
inline const std::string& BallUpdate::bowler() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.bowler)
  return _internal_bowler();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BallUpdate::set_bowler(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bowler_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.BallUpdate.bowler)
}
inline std::string* BallUpdate::mutable_bowler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bowler();
  // @@protoc_insertion_point(field_mutable:odds.BallUpdate.bowler)
  return _s;
}
inline const std::string& BallUpdate::_internal_bowler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bowler_.Get();
}
inline void BallUpdate::_internal_set_bowler(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bowler_.Set(value, GetArena());
}
inline std::string* BallUpdate::_internal_mutable_bowler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bowler_.Mutable( GetArena());
}
inline std::string* BallUpdate::release_bowler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.BallUpdate.bowler)
  return _impl_.bowler_.Release();
}
inline void BallUpdate::set_allocated_bowler(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bowler_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bowler_.IsDefault()) {
    _impl_.bowler_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.BallUpdate.bowler)
}

// int32 runs = 15;
inline void BallUpdate::clear_runs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runs_ = 0;
}
inline ::int32_t BallUpdate::runs() const {
  // @@protoc_insertion_point(field_get:odds.BallUpdate.runs)
  return _internal_runs();
}
inline void BallUpdate::set_runs(::int32_t value) {
  _internal_set_runs(value);
  // @@protoc_insertion_point(field_set:odds.BallUpdate.runs)
}
inline ::int32_t BallUpdate::_internal_runs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.runs_;
}
inline void BallUpdate::_internal_set_runs(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.runs_ = value;
}

// -------------------------------------------------------------------

// MatchStateRequest

// string gameId = 1;
inline void MatchStateRequest::clear_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.ClearToEmpty();
}
inline const std::string& MatchStateRequest::gameid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.MatchStateRequest.gameId)
  return _internal_gameid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MatchStateRequest::set_gameid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.MatchStateRequest.gameId)
}
inline std::string* MatchStateRequest::mutable_gameid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gameid();
  // @@protoc_insertion_point(field_mutable:odds.MatchStateRequest.gameId)
  return _s;
}
inline const std::string& MatchStateRequest::_internal_gameid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gameid_.Get();
}
inline void MatchStateRequest::_internal_set_gameid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.Set(value, GetArena());
}
inline std::string* MatchStateRequest::_internal_mutable_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gameid_.Mutable( GetArena());
}
inline std::string* MatchStateRequest::release_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.MatchStateRequest.gameId)
  return _impl_.gameid_.Release();
}
inline void MatchStateRequest::set_allocated_gameid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gameid_.IsDefault()) {
    _impl_.gameid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.MatchStateRequest.gameId)
}

// .odds.BallUpdate update = 2;
inline bool MatchStateRequest::has_update() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_ != nullptr);
  return value;
}
inline void MatchStateRequest::clear_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.update_ != nullptr) _impl_.update_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::odds::BallUpdate& MatchStateRequest::_internal_update() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odds::BallUpdate* p = _impl_.update_;
  return p != nullptr ? *p : reinterpret_cast<const ::odds::BallUpdate&>(::odds::_BallUpdate_default_instance_);
}
inline const ::odds::BallUpdate& MatchStateRequest::update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.MatchStateRequest.update)
  return _internal_update();
}
inline void MatchStateRequest::unsafe_arena_set_allocated_update(::odds::BallUpdate* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_);
  }
  _impl_.update_ = reinterpret_cast<::odds::BallUpdate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odds.MatchStateRequest.update)
}
inline ::odds::BallUpdate* MatchStateRequest::release_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odds::BallUpdate* released = _impl_.update_;
  _impl_.update_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odds::BallUpdate* MatchStateRequest::unsafe_arena_release_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.MatchStateRequest.update)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odds::BallUpdate* temp = _impl_.update_;
  _impl_.update_ = nullptr;
  return temp;
}
inline ::odds::BallUpdate* MatchStateRequest::_internal_mutable_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.update_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odds::BallUpdate>(GetArena());
    _impl_.update_ = reinterpret_cast<::odds::BallUpdate*>(p);
  }
  return _impl_.update_;
}
inline ::odds::BallUpdate* MatchStateRequest::mutable_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odds::BallUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:odds.MatchStateRequest.update)
  return _msg;
}
inline void MatchStateRequest::set_allocated_update(::odds::BallUpdate* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.update_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.update_ = reinterpret_cast<::odds::BallUpdate*>(value);
  // @@protoc_insertion_point(field_set_allocated:odds.MatchStateRequest.update)
}

// -------------------------------------------------------------------

// Bet

// string userId = 1;
inline void Bet::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& Bet::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.Bet.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bet::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.Bet.userId)
}
inline std::string* Bet::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:odds.Bet.userId)
  return _s;
}
inline const std::string& Bet::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void Bet::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* Bet::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* Bet::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.Bet.userId)
  return _impl_.userid_.Release();
}
inline void Bet::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.Bet.userId)
}

// double stake = 2;
inline void Bet::clear_stake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_ = 0;
}
inline double Bet::stake() const {
  // @@protoc_insertion_point(field_get:odds.Bet.stake)
  return _internal_stake();
}
inline void Bet::set_stake(double value) {
  _internal_set_stake(value);
  // @@protoc_insertion_point(field_set:odds.Bet.stake)
}
inline double Bet::_internal_stake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stake_;
}
inline void Bet::_internal_set_stake(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_ = value;
}

// double odds = 3;
inline void Bet::clear_odds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odds_ = 0;
}
inline double Bet::odds() const {
  // @@protoc_insertion_point(field_get:odds.Bet.odds)
  return _internal_odds();
}
inline void Bet::set_odds(double value) {
  _internal_set_odds(value);
  // @@protoc_insertion_point(field_set:odds.Bet.odds)
}
inline double Bet::_internal_odds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.odds_;
}
inline void Bet::_internal_set_odds(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odds_ = value;
}

// string market = 4;
inline void Bet::clear_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.ClearToEmpty();
}
inline const std::string& Bet::market() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.Bet.market)
  return _internal_market();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bet::set_market(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.Bet.market)
}
inline std::string* Bet::mutable_market() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_market();
  // @@protoc_insertion_point(field_mutable:odds.Bet.market)
  return _s;
}
inline const std::string& Bet::_internal_market() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.market_.Get();
}
inline void Bet::_internal_set_market(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(value, GetArena());
}
inline std::string* Bet::_internal_mutable_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.market_.Mutable( GetArena());
}
inline std::string* Bet::release_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.Bet.market)
  return _impl_.market_.Release();
}
inline void Bet::set_allocated_market(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.market_.IsDefault()) {
    _impl_.market_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.Bet.market)
}

// bool teamA = 5;
inline void Bet::clear_teama() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.teama_ = false;
}
inline bool Bet::teama() const {
  // @@protoc_insertion_point(field_get:odds.Bet.teamA)
  return _internal_teama();
}
inline void Bet::set_teama(bool value) {
  _internal_set_teama(value);
  // @@protoc_insertion_point(field_set:odds.Bet.teamA)
}
inline bool Bet::_internal_teama() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.teama_;
}
inline void Bet::_internal_set_teama(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.teama_ = value;
}

// -------------------------------------------------------------------

// BetRequest

// string gameId = 1;
inline void BetRequest::clear_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.ClearToEmpty();
}
inline const std::string& BetRequest::gameid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.BetRequest.gameId)
  return _internal_gameid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BetRequest::set_gameid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.BetRequest.gameId)
}
inline std::string* BetRequest::mutable_gameid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gameid();
  // @@protoc_insertion_point(field_mutable:odds.BetRequest.gameId)
  return _s;
}
inline const std::string& BetRequest::_internal_gameid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gameid_.Get();
}
inline void BetRequest::_internal_set_gameid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.Set(value, GetArena());
}
inline std::string* BetRequest::_internal_mutable_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gameid_.Mutable( GetArena());
}
inline std::string* BetRequest::release_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.BetRequest.gameId)
  return _impl_.gameid_.Release();
}
inline void BetRequest::set_allocated_gameid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gameid_.IsDefault()) {
    _impl_.gameid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.BetRequest.gameId)
}

// .odds.Bet bet = 2;
inline bool BetRequest::has_bet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bet_ != nullptr);
  return value;
}
inline void BetRequest::clear_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bet_ != nullptr) _impl_.bet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::odds::Bet& BetRequest::_internal_bet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::odds::Bet* p = _impl_.bet_;
  return p != nullptr ? *p : reinterpret_cast<const ::odds::Bet&>(::odds::_Bet_default_instance_);
}
inline const ::odds::Bet& BetRequest::bet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.BetRequest.bet)
  return _internal_bet();
}
inline void BetRequest::unsafe_arena_set_allocated_bet(::odds::Bet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bet_);
  }
  _impl_.bet_ = reinterpret_cast<::odds::Bet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:odds.BetRequest.bet)
}
inline ::odds::Bet* BetRequest::release_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odds::Bet* released = _impl_.bet_;
  _impl_.bet_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::odds::Bet* BetRequest::unsafe_arena_release_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.BetRequest.bet)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::odds::Bet* temp = _impl_.bet_;
  _impl_.bet_ = nullptr;
  return temp;
}
inline ::odds::Bet* BetRequest::_internal_mutable_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bet_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::odds::Bet>(GetArena());
    _impl_.bet_ = reinterpret_cast<::odds::Bet*>(p);
  }
  return _impl_.bet_;
}
inline ::odds::Bet* BetRequest::mutable_bet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::odds::Bet* _msg = _internal_mutable_bet();
  // @@protoc_insertion_point(field_mutable:odds.BetRequest.bet)
  return _msg;
}
inline void BetRequest::set_allocated_bet(::odds::Bet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.bet_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bet_ = reinterpret_cast<::odds::Bet*>(value);
  // @@protoc_insertion_point(field_set_allocated:odds.BetRequest.bet)
}

// -------------------------------------------------------------------

// OddsQueryRequest

// string gameId = 1;
inline void OddsQueryRequest::clear_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.ClearToEmpty();
}
inline const std::string& OddsQueryRequest::gameid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.OddsQueryRequest.gameId)
  return _internal_gameid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OddsQueryRequest::set_gameid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.OddsQueryRequest.gameId)
}
inline std::string* OddsQueryRequest::mutable_gameid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gameid();
  // @@protoc_insertion_point(field_mutable:odds.OddsQueryRequest.gameId)
  return _s;
}
inline const std::string& OddsQueryRequest::_internal_gameid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gameid_.Get();
}
inline void OddsQueryRequest::_internal_set_gameid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.Set(value, GetArena());
}
inline std::string* OddsQueryRequest::_internal_mutable_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gameid_.Mutable( GetArena());
}
inline std::string* OddsQueryRequest::release_gameid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.OddsQueryRequest.gameId)
  return _impl_.gameid_.Release();
}
inline void OddsQueryRequest::set_allocated_gameid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gameid_.IsDefault()) {
    _impl_.gameid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.OddsQueryRequest.gameId)
}

// string market = 2;
inline void OddsQueryRequest::clear_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.ClearToEmpty();
}
inline const std::string& OddsQueryRequest::market() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:odds.OddsQueryRequest.market)
  return _internal_market();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OddsQueryRequest::set_market(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:odds.OddsQueryRequest.market)
}
inline std::string* OddsQueryRequest::mutable_market() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_market();
  // @@protoc_insertion_point(field_mutable:odds.OddsQueryRequest.market)
  return _s;
}
inline const std::string& OddsQueryRequest::_internal_market() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.market_.Get();
}
inline void OddsQueryRequest::_internal_set_market(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.Set(value, GetArena());
}
inline std::string* OddsQueryRequest::_internal_mutable_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.market_.Mutable( GetArena());
}
inline std::string* OddsQueryRequest::release_market() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:odds.OddsQueryRequest.market)
  return _impl_.market_.Release();
}
inline void OddsQueryRequest::set_allocated_market(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.market_.IsDefault()) {
    _impl_.market_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:odds.OddsQueryRequest.market)
}

// -------------------------------------------------------------------

// OddsResponse

// double winProbability = 1;
inline void OddsResponse::clear_winprobability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winprobability_ = 0;
}
inline double OddsResponse::winprobability() const {
  // @@protoc_insertion_point(field_get:odds.OddsResponse.winProbability)
  return _internal_winprobability();
}
inline void OddsResponse::set_winprobability(double value) {
  _internal_set_winprobability(value);
  // @@protoc_insertion_point(field_set:odds.OddsResponse.winProbability)
}
inline double OddsResponse::_internal_winprobability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.winprobability_;
}
inline void OddsResponse::_internal_set_winprobability(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winprobability_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace odds


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // odds_5fengine_2eproto_2epb_2eh
