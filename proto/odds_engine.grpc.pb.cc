// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: odds_engine.proto

#include "odds_engine.pb.h"
#include "odds_engine.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace odds {

static const char* OddsEngine_method_names[] = {
  "/odds.OddsEngine/UpdateMatchState",
  "/odds.OddsEngine/PlaceBet",
  "/odds.OddsEngine/GetOdds",
};

std::unique_ptr< OddsEngine::Stub> OddsEngine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OddsEngine::Stub> stub(new OddsEngine::Stub(channel, options));
  return stub;
}

OddsEngine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateMatchState_(OddsEngine_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlaceBet_(OddsEngine_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOdds_(OddsEngine_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OddsEngine::Stub::UpdateMatchState(::grpc::ClientContext* context, const ::odds::MatchStateRequest& request, ::odds::OddsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::odds::MatchStateRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMatchState_, context, request, response);
}

void OddsEngine::Stub::async::UpdateMatchState(::grpc::ClientContext* context, const ::odds::MatchStateRequest* request, ::odds::OddsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::odds::MatchStateRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMatchState_, context, request, response, std::move(f));
}

void OddsEngine::Stub::async::UpdateMatchState(::grpc::ClientContext* context, const ::odds::MatchStateRequest* request, ::odds::OddsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMatchState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::odds::OddsResponse>* OddsEngine::Stub::PrepareAsyncUpdateMatchStateRaw(::grpc::ClientContext* context, const ::odds::MatchStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::odds::OddsResponse, ::odds::MatchStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMatchState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::odds::OddsResponse>* OddsEngine::Stub::AsyncUpdateMatchStateRaw(::grpc::ClientContext* context, const ::odds::MatchStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMatchStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OddsEngine::Stub::PlaceBet(::grpc::ClientContext* context, const ::odds::BetRequest& request, ::odds::OddsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::odds::BetRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlaceBet_, context, request, response);
}

void OddsEngine::Stub::async::PlaceBet(::grpc::ClientContext* context, const ::odds::BetRequest* request, ::odds::OddsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::odds::BetRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceBet_, context, request, response, std::move(f));
}

void OddsEngine::Stub::async::PlaceBet(::grpc::ClientContext* context, const ::odds::BetRequest* request, ::odds::OddsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceBet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::odds::OddsResponse>* OddsEngine::Stub::PrepareAsyncPlaceBetRaw(::grpc::ClientContext* context, const ::odds::BetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::odds::OddsResponse, ::odds::BetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlaceBet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::odds::OddsResponse>* OddsEngine::Stub::AsyncPlaceBetRaw(::grpc::ClientContext* context, const ::odds::BetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlaceBetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OddsEngine::Stub::GetOdds(::grpc::ClientContext* context, const ::odds::OddsQueryRequest& request, ::odds::OddsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::odds::OddsQueryRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOdds_, context, request, response);
}

void OddsEngine::Stub::async::GetOdds(::grpc::ClientContext* context, const ::odds::OddsQueryRequest* request, ::odds::OddsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::odds::OddsQueryRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOdds_, context, request, response, std::move(f));
}

void OddsEngine::Stub::async::GetOdds(::grpc::ClientContext* context, const ::odds::OddsQueryRequest* request, ::odds::OddsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOdds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::odds::OddsResponse>* OddsEngine::Stub::PrepareAsyncGetOddsRaw(::grpc::ClientContext* context, const ::odds::OddsQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::odds::OddsResponse, ::odds::OddsQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOdds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::odds::OddsResponse>* OddsEngine::Stub::AsyncGetOddsRaw(::grpc::ClientContext* context, const ::odds::OddsQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOddsRaw(context, request, cq);
  result->StartCall();
  return result;
}

OddsEngine::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OddsEngine_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OddsEngine::Service, ::odds::MatchStateRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OddsEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::odds::MatchStateRequest* req,
             ::odds::OddsResponse* resp) {
               return service->UpdateMatchState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OddsEngine_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OddsEngine::Service, ::odds::BetRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OddsEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::odds::BetRequest* req,
             ::odds::OddsResponse* resp) {
               return service->PlaceBet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OddsEngine_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OddsEngine::Service, ::odds::OddsQueryRequest, ::odds::OddsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OddsEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::odds::OddsQueryRequest* req,
             ::odds::OddsResponse* resp) {
               return service->GetOdds(ctx, req, resp);
             }, this)));
}

OddsEngine::Service::~Service() {
}

::grpc::Status OddsEngine::Service::UpdateMatchState(::grpc::ServerContext* context, const ::odds::MatchStateRequest* request, ::odds::OddsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OddsEngine::Service::PlaceBet(::grpc::ServerContext* context, const ::odds::BetRequest* request, ::odds::OddsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OddsEngine::Service::GetOdds(::grpc::ServerContext* context, const ::odds::OddsQueryRequest* request, ::odds::OddsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace odds

